// Generated by Haxe 3.4.7
(function ($global) { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var List = function() {
	this.length = 0;
};
List.__name__ = true;
List.prototype = {
	add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,first: function() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	,last: function() {
		if(this.q == null) {
			return null;
		} else {
			return this.q.item;
		}
	}
	,isEmpty: function() {
		return this.h == null;
	}
	,toString: function() {
		var s_b = "";
		var first = true;
		var l = this.h;
		s_b += "{";
		while(l != null) {
			if(first) {
				first = false;
			} else {
				s_b += ", ";
			}
			s_b += Std.string(Std.string(l.item));
			l = l.next;
		}
		s_b += "}";
		return s_b;
	}
	,join: function(sep) {
		var s_b = "";
		var first = true;
		var l = this.h;
		while(l != null) {
			if(first) {
				first = false;
			} else {
				s_b += sep == null ? "null" : "" + sep;
			}
			s_b += Std.string(l.item);
			l = l.next;
		}
		return s_b;
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
_$List_ListNode.__name__ = true;
_$List_ListNode.prototype = {
	__class__: _$List_ListNode
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_ds__$HashMap_HashMapData = function() {
	this.keys = new haxe_ds_IntMap();
	this.values = new haxe_ds_IntMap();
};
haxe_ds__$HashMap_HashMapData.__name__ = true;
haxe_ds__$HashMap_HashMapData.prototype = {
	__class__: haxe_ds__$HashMap_HashMapData
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) {
			a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,toString: function() {
		var s_b = "";
		s_b += "{";
		var it = this.keys();
		var i = it;
		while(i.hasNext()) {
			var i1 = i.next();
			s_b += i1 == null ? "null" : "" + i1;
			s_b += " => ";
			s_b += Std.string(Std.string(this.h[i1]));
			if(it.hasNext()) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_ds__$Vector_Vector_$Impl_$ = {};
haxe_ds__$Vector_Vector_$Impl_$.__name__ = true;
haxe_ds__$Vector_Vector_$Impl_$.blit = function(src,srcPos,dest,destPos,len) {
	if(src == dest) {
		if(srcPos < destPos) {
			var i = srcPos + len;
			var j = destPos + len;
			var _g1 = 0;
			var _g = len;
			while(_g1 < _g) {
				var k = _g1++;
				--i;
				--j;
				src[j] = src[i];
			}
		} else if(srcPos > destPos) {
			var i1 = srcPos;
			var j1 = destPos;
			var _g11 = 0;
			var _g2 = len;
			while(_g11 < _g2) {
				var k1 = _g11++;
				src[j1] = src[i1];
				++i1;
				++j1;
			}
		}
	} else {
		var _g12 = 0;
		var _g3 = len;
		while(_g12 < _g3) {
			var i2 = _g12++;
			dest[destPos + i2] = src[srcPos + i2];
		}
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var kot_Clade = function() {
	this.mDistStretch = 12000;
	this.mLineTextDist = 3;
	this.mBorder = 20;
	this.mLineWidth = 1;
	this.mTextSize = 14;
	this.mTextDist = 5;
	this.mCladeDist = 5;
	this.mColor = "black";
	this.mDist = 0;
	this.mChilds = new List();
	this.mInfo = new List();
	this.mConnectedInfo = new haxe_ds_StringMap();
};
kot_Clade.__name__ = true;
kot_Clade.prototype = {
	colorfy: function(color) {
		if(this.mColor != "black") {
			return;
		}
		this.mColor = color;
		var _g_head = this.mChilds.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var child = val;
			child.colorfy(color);
		}
	}
	,setParent: function(clade,dist) {
		this.mParent = clade;
		if(dist != null) {
			this.mDist = dist;
		}
		clade.mChilds.add(this);
	}
	,setDist: function(dist) {
		this.mDist = dist;
	}
	,getChilds: function() {
		return this.mChilds;
	}
	,addInfo: function(info) {
		this.mInfo.add(info);
	}
	,isTerminal: function() {
		return this.mChilds.length == 0;
	}
	,isRoot: function() {
		return this.mParent == null;
	}
	,calcSize: function(useCache) {
		if(useCache && this.mLastSizeCalc != null) {
			return this.mLastSizeCalc;
		}
		var w = 0;
		var h = 0;
		if(this.mChilds.length == 0) {
			var maxInfoLen = 0;
			var _g_head = this.mInfo.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var info = val;
				if(maxInfoLen > info.length) {
					maxInfoLen = maxInfoLen;
				} else {
					maxInfoLen = info.length;
				}
			}
			w = this.mDist * this.mDistStretch + this.mLineTextDist + maxInfoLen * this.mTextSize;
			if(this.mInfo.length == 0) {
				h = this.mCladeDist << 1;
			} else {
				h = this.mInfo.length * this.mTextSize + (this.mInfo.length - 1) * this.mTextDist + (this.mCladeDist << 1);
			}
		} else {
			var _g_head1 = this.mChilds.h;
			while(_g_head1 != null) {
				var val1 = _g_head1.item;
				_g_head1 = _g_head1.next;
				var child = val1;
				var childInfo = child.calcSize(useCache);
				if(w > childInfo.w) {
					w = w;
				} else {
					w = childInfo.w;
				}
				h += childInfo.h;
			}
			w += this.mDist * this.mDistStretch;
			h += this.mInfo.length * this.mTextSize + (this.mInfo.length - 1) * this.mTextDist + (this.mCladeDist << 2);
		}
		this.mLastSizeCalc = { w : w, h : h};
		return this.mLastSizeCalc;
	}
	,getSVG: function() {
		var result = [];
		var w = 0;
		var h = 0;
		if(this.mChilds.length == 0) {
			var maxInfoLen = 0;
			var _g_head = this.mInfo.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var info = val;
				if(maxInfoLen > info.length) {
					maxInfoLen = maxInfoLen;
				} else {
					maxInfoLen = info.length;
				}
			}
			w = this.mDist * this.mDistStretch + this.mLineTextDist + maxInfoLen * this.mTextSize;
			if(this.mInfo.length == 0) {
				h = this.mCladeDist << 1;
			} else {
				h = this.mInfo.length * this.mTextSize + (this.mInfo.length - 1) * this.mTextDist + (this.mCladeDist << 1);
			}
		} else {
			var _g_head1 = this.mChilds.h;
			while(_g_head1 != null) {
				var val1 = _g_head1.item;
				_g_head1 = _g_head1.next;
				var child = val1;
				var childInfo = child.calcSize(false);
				if(w > childInfo.w) {
					w = w;
				} else {
					w = childInfo.w;
				}
				h += childInfo.h;
			}
			w += this.mDist * this.mDistStretch;
			h += this.mInfo.length * this.mTextSize + (this.mInfo.length - 1) * this.mTextDist + (this.mCladeDist << 2);
		}
		this.mLastSizeCalc = { w : w, h : h};
		var dim = this.mLastSizeCalc;
		result.push("<svg id='resultTree' version='1.1' baseProfile='full' width='" + (2 * this.mBorder + 200 + dim.w) + "' height='" + (2 * this.mBorder + dim.h) + "' xmlns='http://www.w3.org/2000/svg'>");
		result.push("<g style='stroke:" + this.mColor + ";stroke-width:" + this.mLineWidth + "' font-family='Courier New' font-size='" + this.mTextSize + "'>");
		this.paint(result,this.mBorder,this.mBorder,this.mColor);
		result.push("</g>");
		result.push("</svg>");
		return result.join("");
	}
	,paint: function(result,x,y,color) {
		var resX = 0;
		var resY = 0;
		var finalY = 0;
		result.push("<g id='" + this.mInfo.first() + "' style='stroke:" + this.mColor + "'>");
		if(this.mChilds.length == 0) {
			var dim;
			if(this.mLastSizeCalc != null) {
				dim = this.mLastSizeCalc;
			} else {
				var w = 0;
				var h = 0;
				if(this.mChilds.length == 0) {
					var maxInfoLen = 0;
					var _g_head = this.mInfo.h;
					while(_g_head != null) {
						var val = _g_head.item;
						_g_head = _g_head.next;
						var info = val;
						if(maxInfoLen > info.length) {
							maxInfoLen = maxInfoLen;
						} else {
							maxInfoLen = info.length;
						}
					}
					w = this.mDist * this.mDistStretch + this.mLineTextDist + maxInfoLen * this.mTextSize;
					if(this.mInfo.length == 0) {
						h = this.mCladeDist << 1;
					} else {
						h = this.mInfo.length * this.mTextSize + (this.mInfo.length - 1) * this.mTextDist + (this.mCladeDist << 1);
					}
				} else {
					var _g_head1 = this.mChilds.h;
					while(_g_head1 != null) {
						var val1 = _g_head1.item;
						_g_head1 = _g_head1.next;
						var child = val1;
						var childInfo = child.calcSize(true);
						if(w > childInfo.w) {
							w = w;
						} else {
							w = childInfo.w;
						}
						h += childInfo.h;
					}
					w += this.mDist * this.mDistStretch;
					h += this.mInfo.length * this.mTextSize + (this.mInfo.length - 1) * this.mTextDist + (this.mCladeDist << 2);
				}
				this.mLastSizeCalc = { w : w, h : h};
				dim = this.mLastSizeCalc;
			}
			finalY = dim.h + y;
			var mx = x;
			var my = y + dim.h / 2;
			result.push("<line x1='" + mx + "' y1='" + my + "' x2='" + (mx + this.mDist * this.mDistStretch) + "' y2='" + my + "' title='" + this.mDist + "'/>");
			resX = mx;
			resY = my;
			mx = x + this.mDist * this.mDistStretch + this.mLineTextDist;
			my = y + this.mCladeDist + this.mTextSize / 2 + 2.5;
			var _g_head2 = this.mInfo.h;
			while(_g_head2 != null) {
				var val2 = _g_head2.item;
				_g_head2 = _g_head2.next;
				var info1 = val2;
				result.push("<text x='" + mx + "' y='" + my + "'>" + info1 + "</text>");
				my += this.mTextSize + this.mTextDist;
			}
		} else {
			var dim1;
			if(this.mLastSizeCalc != null) {
				dim1 = this.mLastSizeCalc;
			} else {
				var w1 = 0;
				var h1 = 0;
				if(this.mChilds.length == 0) {
					var maxInfoLen1 = 0;
					var _g_head3 = this.mInfo.h;
					while(_g_head3 != null) {
						var val3 = _g_head3.item;
						_g_head3 = _g_head3.next;
						var info2 = val3;
						if(maxInfoLen1 > info2.length) {
							maxInfoLen1 = maxInfoLen1;
						} else {
							maxInfoLen1 = info2.length;
						}
					}
					w1 = this.mDist * this.mDistStretch + this.mLineTextDist + maxInfoLen1 * this.mTextSize;
					if(this.mInfo.length == 0) {
						h1 = this.mCladeDist << 1;
					} else {
						h1 = this.mInfo.length * this.mTextSize + (this.mInfo.length - 1) * this.mTextDist + (this.mCladeDist << 1);
					}
				} else {
					var _g_head4 = this.mChilds.h;
					while(_g_head4 != null) {
						var val4 = _g_head4.item;
						_g_head4 = _g_head4.next;
						var child1 = val4;
						var childInfo1 = child1.calcSize(true);
						if(w1 > childInfo1.w) {
							w1 = w1;
						} else {
							w1 = childInfo1.w;
						}
						h1 += childInfo1.h;
					}
					w1 += this.mDist * this.mDistStretch;
					h1 += this.mInfo.length * this.mTextSize + (this.mInfo.length - 1) * this.mTextDist + (this.mCladeDist << 2);
				}
				this.mLastSizeCalc = { w : w1, h : h1};
				dim1 = this.mLastSizeCalc;
			}
			finalY = dim1.h + y;
			var mx1 = x;
			var my1 = y + dim1.h / 2;
			result.push("<line x1='" + mx1 + "' y1='" + my1 + "' x2='" + (mx1 + this.mDist * this.mDistStretch) + "' y2='" + my1 + "' title='" + this.mDist + "'/>");
			resX = mx1;
			resY = my1;
			var h2 = this.mCladeDist;
			var lowestY = -1;
			var highestY = -1;
			var txtY = -1;
			var _g_head5 = this.mChilds.h;
			while(_g_head5 != null) {
				var val5 = _g_head5.item;
				_g_head5 = _g_head5.next;
				var child2 = val5;
				var childDim;
				if(child2.mLastSizeCalc != null) {
					childDim = child2.mLastSizeCalc;
				} else {
					var w2 = 0;
					var h3 = 0;
					if(child2.mChilds.length == 0) {
						var maxInfoLen2 = 0;
						var _g_head6 = child2.mInfo.h;
						while(_g_head6 != null) {
							var val6 = _g_head6.item;
							_g_head6 = _g_head6.next;
							var info3 = val6;
							if(maxInfoLen2 > info3.length) {
								maxInfoLen2 = maxInfoLen2;
							} else {
								maxInfoLen2 = info3.length;
							}
						}
						w2 = child2.mDist * child2.mDistStretch + child2.mLineTextDist + maxInfoLen2 * child2.mTextSize;
						if(child2.mInfo.length == 0) {
							h3 = child2.mCladeDist << 1;
						} else {
							h3 = child2.mInfo.length * child2.mTextSize + (child2.mInfo.length - 1) * child2.mTextDist + (child2.mCladeDist << 1);
						}
					} else {
						var _g_head7 = child2.mChilds.h;
						while(_g_head7 != null) {
							var val7 = _g_head7.item;
							_g_head7 = _g_head7.next;
							var child3 = val7;
							var childInfo2 = child3.calcSize(true);
							if(w2 > childInfo2.w) {
								w2 = w2;
							} else {
								w2 = childInfo2.w;
							}
							h3 += childInfo2.h;
						}
						w2 += child2.mDist * child2.mDistStretch;
						h3 += child2.mInfo.length * child2.mTextSize + (child2.mInfo.length - 1) * child2.mTextDist + (child2.mCladeDist << 2);
					}
					child2.mLastSizeCalc = { w : w2, h : h3};
					childDim = child2.mLastSizeCalc;
				}
				var midPoint = child2.paint(result,x + this.mDist * this.mDistStretch,y + h2,this.mColor);
				if(txtY != -1) {
					txtY = txtY;
				} else {
					txtY = midPoint.finalY;
				}
				if(lowestY != -1 && lowestY < midPoint.y) {
					lowestY = lowestY;
				} else {
					lowestY = midPoint.y;
				}
				if(highestY > midPoint.y) {
					highestY = highestY;
				} else {
					highestY = midPoint.y;
				}
				h2 += childDim.h + this.mInfo.length * this.mTextSize + (this.mInfo.length - 1) * this.mTextDist;
			}
			mx1 += this.mDist * this.mDistStretch;
			result.push("<line x1='" + mx1 + "' y1='" + lowestY + "' x2='" + mx1 + "' y2='" + highestY + "' title='" + this.mDist + "'/>");
			mx1 += this.mLineTextDist;
			my1 = txtY + this.mCladeDist + this.mTextSize / 2 + 2.5;
			var _g_head8 = this.mInfo.h;
			while(_g_head8 != null) {
				var val8 = _g_head8.item;
				_g_head8 = _g_head8.next;
				var info4 = val8;
				result.push("<text x='" + mx1 + "' y='" + my1 + "'>" + info4 + "</text>");
				my1 += this.mTextSize + this.mTextDist;
			}
		}
		result.push("</g>");
		return { x : resX, y : resY, finalY : finalY};
	}
	,getTextRepresentation: function(result,indent) {
		var _g1 = 0;
		var _g = indent;
		while(_g1 < _g) {
			var i = _g1++;
			result.push("  ");
		}
		result.push("Clade(" + this.mDist + ", " + this.mColor + ";" + Std.string(this.mInfo) + ")\n");
		var _g_head = this.mChilds.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var clade = val;
			clade.getTextRepresentation(result,indent + 1);
		}
	}
	,toString: function() {
		var result = [];
		this.getTextRepresentation(result,0);
		return result.join("");
	}
	,toString_: function() {
		var result = [];
		result.push("Clade(" + this.mInfo.join(",") + ")");
		result.push("  parent: " + (this.mParent == null ? "null" : this.mParent.mInfo.join(",")));
		result.push("  childs: " + this.mChilds.length);
		return result.join("");
	}
	,__class__: kot_Clade
};
var kot_CladeColorer = function() { };
kot_CladeColorer.__name__ = true;
kot_CladeColorer.getColor = function(i) {
	var ii = i % kot_CladeColorer.colors.length;
	return kot_CladeColorer.colors[ii];
};
kot_CladeColorer.colorClade = function(c,i) {
	var ii = i % kot_CladeColorer.colors.length;
	var color = kot_CladeColorer.colors[ii];
	c.colorfy(color);
};
kot_CladeColorer.same = function(l1,l2) {
	if(l1.length != l2.length) {
		return false;
	}
	var _g_head = l1.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var x = val;
		var found = false;
		var _g_head1 = l2.h;
		while(_g_head1 != null) {
			var val1 = _g_head1.item;
			_g_head1 = _g_head1.next;
			var y = val1;
			if(x == y) {
				found = true;
				break;
			}
		}
		if(!found) {
			return false;
		}
	}
	return true;
};
kot_CladeColorer.findClade = function(c,l) {
	var _this = c.mConnectedInfo;
	if(kot_CladeColorer.same(__map_reserved["seqNames"] != null ? _this.getReserved("seqNames") : _this.h["seqNames"],l)) {
		return c;
	}
	var _g_head = c.mChilds.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var child = val;
		var ccc = kot_CladeColorer.findClade(child,l);
		if(ccc != null) {
			return ccc;
		}
	}
	return null;
};
kot_CladeColorer.colorClades = function(c,l) {
	var i = 0;
	var _g_head = l.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var ll = val;
		console.log("=== " + Std.string(ll));
		var cc = kot_CladeColorer.findClade(c,ll);
		if(cc != null) {
			console.log(cc);
			var ii = i++ % kot_CladeColorer.colors.length;
			var color = kot_CladeColorer.colors[ii];
			cc.colorfy(color);
		}
	}
};
var kot_Matrix = function(w,h) {
	if(w < 1) {
		throw new js__$Boot_HaxeError("Width must be bigger then 0!");
	}
	if(h < 1) {
		throw new js__$Boot_HaxeError("Height must be bigger then 0!");
	}
	this.mWidth = w;
	this.mHeight = h;
	var this1 = new Array(w * h);
	this.mValues = this1;
};
kot_Matrix.__name__ = true;
kot_Matrix.prototype = {
	getWidth: function() {
		return this.mWidth;
	}
	,getHeight: function() {
		return this.mHeight;
	}
	,getValue: function(x,y) {
		if(0 > x || x >= this.mWidth || 0 > y || y >= this.mHeight) {
			throw new js__$Boot_HaxeError("x or y (" + x + "," + y + ") out of range!");
		}
		return this.mValues[x + y * this.mWidth];
	}
	,setValue: function(x,y,val) {
		if(0 > x || x >= this.mWidth || 0 > y || y >= this.mHeight) {
			throw new js__$Boot_HaxeError("x or y (" + x + "," + y + ") out of range!");
		}
		this.mValues[x + y * this.mWidth] = val;
	}
	,toString: function() {
		var result = [];
		result.push("Matrix(" + this.mWidth + "," + this.mHeight + ")\n");
		var _g1 = 0;
		var _g = this.mHeight;
		while(_g1 < _g) {
			var j = _g1++;
			var _g3 = 0;
			var _g2 = this.mWidth;
			while(_g3 < _g2) {
				var i = _g3++;
				if(i != 0) {
					result.push("\t");
				}
				if(0 > i || i >= this.mWidth || 0 > j || j >= this.mHeight) {
					throw new js__$Boot_HaxeError("x or y (" + i + "," + j + ") out of range!");
				}
				result.push("" + this.mValues[i + j * this.mWidth]);
			}
			result.push("\n");
		}
		return result.join("");
	}
	,__class__: kot_Matrix
};
var kot_DistanceMatrix = function(names) {
	if(names == null || names.length == 0) {
		throw new js__$Boot_HaxeError("Names must not be empty!");
	}
	kot_Matrix.call(this,names.length,names.length);
	this.mNames = names;
	var this1 = new haxe_ds__$HashMap_HashMapData();
	this.mNamePosLookup = this1;
	var pos = 0;
	var _g = 0;
	while(_g < names.length) {
		var name = names[_g];
		++_g;
		var this2 = this.mNamePosLookup;
		var _this = this2.keys;
		var key = name.hashCode();
		_this.h[key] = name;
		var _this1 = this2.values;
		var key1 = name.hashCode();
		_this1.h[key1] = pos++;
	}
};
kot_DistanceMatrix.__name__ = true;
kot_DistanceMatrix.__super__ = kot_Matrix;
kot_DistanceMatrix.prototype = $extend(kot_Matrix.prototype,{
	getNames: function() {
		return this.mNames;
	}
	,lookup: function(x1,x2) {
		var ret = 0;
		if(x1 != x2) {
			var _this = this.mNamePosLookup.values;
			var key = x1.hashCode();
			var pos1 = _this.h[key];
			if(pos1 == null) {
				throw new js__$Boot_HaxeError(Std.string(x1) + " not in map!");
			}
			var _this1 = this.mNamePosLookup.values;
			var key1 = x2.hashCode();
			var pos2 = _this1.h[key1];
			if(pos2 == null) {
				throw new js__$Boot_HaxeError(Std.string(x2) + " not in map!");
			}
			if(pos1 > pos2) {
				var swap = pos1;
				pos1 = pos2;
				pos2 = swap;
			}
			ret = this.mValues[pos1 + pos2 * this.mWidth];
		}
		return ret;
	}
	,set: function(x1,x2,d) {
		if(x1 == x2) {
			if(d != 0) {
				throw new js__$Boot_HaxeError("Distance of identical objects must be 0!");
			}
		}
		var _this = this.mNamePosLookup.values;
		var key = x1.hashCode();
		var pos1 = _this.h[key];
		if(pos1 == null) {
			throw new js__$Boot_HaxeError(Std.string(x1) + " not in map!");
		}
		var _this1 = this.mNamePosLookup.values;
		var key1 = x2.hashCode();
		var pos2 = _this1.h[key1];
		if(pos2 == null) {
			throw new js__$Boot_HaxeError(Std.string(x2) + " not in map!");
		}
		if(pos1 > pos2) {
			var swap = pos1;
			pos1 = pos2;
			pos2 = swap;
		}
		this.mValues[pos1 + pos2 * this.mWidth] = d;
	}
	,toString: function() {
		var result = [];
		result.push("Dist");
		var _g = 0;
		var _g1 = this.mNames;
		while(_g < _g1.length) {
			var name = _g1[_g];
			++_g;
			result.push("\t" + Std.string(name));
		}
		result.push("\n");
		var x = 0;
		var _g2 = 0;
		var _g11 = this.mNames;
		while(_g2 < _g11.length) {
			var name1 = _g11[_g2];
			++_g2;
			result.push(Std.string(name1));
			var y = 0;
			var _g21 = 0;
			var _g3 = this.mNames;
			while(_g21 < _g3.length) {
				var name2 = _g3[_g21];
				++_g21;
				if(y >= x) {
					break;
				}
				result.push("\t" + this.mValues[y + x * this.mWidth]);
				++y;
			}
			result.push("\n");
			++x;
		}
		return result.join("");
	}
	,__class__: kot_DistanceMatrix
});
var kot_DistanceMatrixReader = function() {
};
kot_DistanceMatrixReader.__name__ = true;
kot_DistanceMatrixReader.prototype = {
	readMatrix: function(fileContent) {
		var lines = fileContent.split("\n");
		var names = new List();
		var _g = 0;
		while(_g < lines.length) {
			var line = lines[_g];
			++_g;
			line = StringTools.trim(line);
			if(line == "" || line.charAt(0) == "#") {
				continue;
			}
			var name = line.split("\t")[0];
			names.add(name);
		}
		var length = names.length;
		var this1 = new Array(length);
		var seqs = this1;
		var lookup = new haxe_ds_StringMap();
		var i = 0;
		var _g_head = names.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var name1 = val;
			var n = new List();
			n.add(name1);
			var s = new kot_Sequence(n,"");
			seqs[i++] = s;
			if(__map_reserved[name1] != null) {
				lookup.setReserved(name1,s);
			} else {
				lookup.h[name1] = s;
			}
		}
		var d = new kot_DistanceMatrix(seqs);
		var _g1 = 0;
		while(_g1 < lines.length) {
			var line1 = lines[_g1];
			++_g1;
			line1 = StringTools.trim(line1);
			if(line1 == "" || line1.charAt(0) == "#") {
				continue;
			}
			var name2 = line1.split("\t")[0];
			var s1 = __map_reserved[name2] != null ? lookup.getReserved(name2) : lookup.h[name2];
			var pos = -2;
			var _g11 = 0;
			var _g2 = line1.split("\t");
			while(_g11 < _g2.length) {
				var e = _g2[_g11];
				++_g11;
				++pos;
				if(pos == -1) {
					continue;
				}
				var s2 = seqs[pos];
				var val1 = parseFloat(e);
				if(s1 == s2) {
					if(val1 != 0) {
						throw new js__$Boot_HaxeError("Distance of identical objects must be 0!");
					}
				}
				var _this = d.mNamePosLookup.values;
				var key = s1.hashCode();
				var pos1 = _this.h[key];
				if(pos1 == null) {
					throw new js__$Boot_HaxeError(Std.string(s1) + " not in map!");
				}
				var _this1 = d.mNamePosLookup.values;
				var key1 = s2.hashCode();
				var pos2 = _this1.h[key1];
				if(pos2 == null) {
					throw new js__$Boot_HaxeError(Std.string(s2) + " not in map!");
				}
				if(pos1 > pos2) {
					var swap = pos1;
					pos1 = pos2;
					pos2 = swap;
				}
				d.mValues[pos1 + pos2 * d.mWidth] = val1;
			}
		}
		console.log(d);
		return d;
	}
	,__class__: kot_DistanceMatrixReader
};
var kot_IAlignmentReader = function() { };
kot_IAlignmentReader.__name__ = true;
kot_IAlignmentReader.prototype = {
	__class__: kot_IAlignmentReader
};
var kot_FastaAlignmentReader = function() {
};
kot_FastaAlignmentReader.__name__ = true;
kot_FastaAlignmentReader.__interfaces__ = [kot_IAlignmentReader];
kot_FastaAlignmentReader.prototype = {
	readSequences: function(fileContent,globalDeletion) {
		var sequences = [];
		var lines = fileContent.split("\n");
		var name = null;
		var seq = null;
		var seqAlreadySeen = new haxe_ds_StringMap();
		var badPositions_h = { };
		var _g = 0;
		while(_g < lines.length) {
			var line = lines[_g];
			++_g;
			line = StringTools.trim(line);
			if(line == "" || line.charAt(0) == ";" || line.charAt(0) == "#") {
				continue;
			}
			if(line.charAt(0) == ">") {
				if(name != null) {
					if(__map_reserved[seq] != null ? seqAlreadySeen.existsReserved(seq) : seqAlreadySeen.h.hasOwnProperty(seq)) {
						var s = __map_reserved[seq] != null ? seqAlreadySeen.getReserved(seq) : seqAlreadySeen.h[seq];
						s.mNames.add(name);
					} else {
						var l = new List();
						l.add(name);
						var s1 = new kot_Sequence(l,seq);
						if(__map_reserved[seq] != null) {
							seqAlreadySeen.setReserved(seq,s1);
						} else {
							seqAlreadySeen.h[seq] = s1;
						}
						sequences.push(s1);
					}
				}
				name = StringTools.trim(HxOverrides.substr(line,1,null));
				seq = "";
			} else {
				seq = seq.toUpperCase() + line;
			}
		}
		if(name != null) {
			if(__map_reserved[seq] != null ? seqAlreadySeen.existsReserved(seq) : seqAlreadySeen.h.hasOwnProperty(seq)) {
				var s2 = __map_reserved[seq] != null ? seqAlreadySeen.getReserved(seq) : seqAlreadySeen.h[seq];
				s2.mNames.add(name);
			} else {
				var l1 = new List();
				l1.add(name);
				var s3 = new kot_Sequence(l1,seq);
				if(__map_reserved[seq] != null) {
					seqAlreadySeen.setReserved(seq,s3);
				} else {
					seqAlreadySeen.h[seq] = s3;
				}
				sequences.push(s3);
			}
		}
		if(globalDeletion) {
			var posToDelete = new haxe_ds_IntMap();
			var _g1 = 0;
			while(_g1 < sequences.length) {
				var sequence = sequences[_g1];
				++_g1;
				sequence.getBadPositions(posToDelete);
			}
			var count = 0;
			var seqs = new haxe_ds_StringMap();
			var _g2 = 0;
			while(_g2 < sequences.length) {
				var sequence1 = sequences[_g2];
				++_g2;
				var s4 = sequence1.removePositions(posToDelete);
				if(__map_reserved[s4] != null ? seqs.existsReserved(s4) : seqs.h.hasOwnProperty(s4)) {
					var names = __map_reserved[s4] != null ? seqs.getReserved(s4) : seqs.h[s4];
					var _g1_head = sequence1.mNames.h;
					while(_g1_head != null) {
						var val = _g1_head.item;
						_g1_head = _g1_head.next;
						var name1 = val;
						names.add(name1);
					}
					if(__map_reserved[s4] != null) {
						seqs.setReserved(s4,names);
					} else {
						seqs.h[s4] = names;
					}
				} else {
					var value = sequence1.mNames;
					if(__map_reserved[s4] != null) {
						seqs.setReserved(s4,value);
					} else {
						seqs.h[s4] = value;
					}
					++count;
				}
			}
			var this1 = new Array(count);
			var result = this1;
			var i = 0;
			var sequence2 = seqs.keys();
			while(sequence2.hasNext()) {
				var sequence3 = sequence2.next();
				var s5 = sequence3;
				var names1 = __map_reserved[sequence3] != null ? seqs.getReserved(sequence3) : seqs.h[sequence3];
				result[i++] = new kot_Sequence(names1,s5);
			}
			return result;
		}
		var length = sequences.length;
		var this2 = new Array(length);
		var result1 = this2;
		var i1 = 0;
		var _g3 = 0;
		while(_g3 < sequences.length) {
			var sequence4 = sequences[_g3];
			++_g3;
			result1[i1++] = sequence4;
		}
		return result1;
	}
	,__class__: kot_FastaAlignmentReader
};
var kot_FourTimesRule = function() { };
kot_FourTimesRule.__name__ = true;
kot_FourTimesRule.calcPairwiseDifference = function(a1,a2) {
	var result = 0;
	if(kot_FourTimesRule.distanceMatrix != null) {
		var _this = kot_FourTimesRule.distanceMatrix;
		var ret = 0;
		if(a1 != a2) {
			var _this1 = _this.mNamePosLookup.values;
			var key = a1.hashCode();
			var pos1 = _this1.h[key];
			if(pos1 == null) {
				throw new js__$Boot_HaxeError(Std.string(a1) + " not in map!");
			}
			var _this2 = _this.mNamePosLookup.values;
			var key1 = a2.hashCode();
			var pos2 = _this2.h[key1];
			if(pos2 == null) {
				throw new js__$Boot_HaxeError(Std.string(a2) + " not in map!");
			}
			if(pos1 > pos2) {
				var swap = pos1;
				pos1 = pos2;
				pos2 = swap;
			}
			ret = _this.mValues[pos1 + pos2 * _this.mWidth];
		}
		result = ret;
	} else {
		if((a2.mSeq == null ? 0 : a2.mSeq.length) != (a1.mSeq == null ? 0 : a1.mSeq.length)) {
			throw new js__$Boot_HaxeError("Cannot compare sequences of different length!");
		}
		var score = 0;
		var count = 0;
		var _g1 = 0;
		var _g = a1.mSeq == null ? 0 : a1.mSeq.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c1 = a1.mSeq.charAt(i);
			var c2 = a2.mSeq.charAt(i);
			if(!(c1 == "A" || c1 == "T" || c1 == "G" || c1 == "C") || !(c2 == "A" || c2 == "T" || c2 == "G" || c2 == "C")) {
				continue;
			}
			if(c1 != c2) {
				++score;
			}
			++count;
		}
		var res = count == 0 ? 1.0 : score / count;
		result = res;
	}
	return result;
};
kot_FourTimesRule.calcPairwiseDistance = function(seqs) {
	var count = 0;
	var diff = 0;
	var c = 0;
	var _g_head = seqs.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var seq1 = val;
		var _g1 = 0;
		var _g = seq1.mNames.length;
		while(_g1 < _g) {
			var i = _g1++;
			var d = 0;
			var _g2_head = seqs.h;
			while(_g2_head != null) {
				var val1 = _g2_head.item;
				_g2_head = _g2_head.next;
				var seq2 = val1;
				var _g3 = 0;
				var _g2 = seq2.mNames.length;
				while(_g3 < _g2) {
					var j = _g3++;
					if(c == d) {
						++d;
						continue;
					}
					++count;
					var result = 0;
					if(kot_FourTimesRule.distanceMatrix != null) {
						var _this = kot_FourTimesRule.distanceMatrix;
						var ret = 0;
						if(seq1 != seq2) {
							var _this1 = _this.mNamePosLookup.values;
							var key = seq1.hashCode();
							var pos1 = _this1.h[key];
							if(pos1 == null) {
								throw new js__$Boot_HaxeError(Std.string(seq1) + " not in map!");
							}
							var _this2 = _this.mNamePosLookup.values;
							var key1 = seq2.hashCode();
							var pos2 = _this2.h[key1];
							if(pos2 == null) {
								throw new js__$Boot_HaxeError(Std.string(seq2) + " not in map!");
							}
							if(pos1 > pos2) {
								var swap = pos1;
								pos1 = pos2;
								pos2 = swap;
							}
							ret = _this.mValues[pos1 + pos2 * _this.mWidth];
						}
						result = ret;
					} else {
						if((seq2.mSeq == null ? 0 : seq2.mSeq.length) != (seq1.mSeq == null ? 0 : seq1.mSeq.length)) {
							throw new js__$Boot_HaxeError("Cannot compare sequences of different length!");
						}
						var score = 0;
						var count1 = 0;
						var _g11 = 0;
						var _g4 = seq1.mSeq == null ? 0 : seq1.mSeq.length;
						while(_g11 < _g4) {
							var i1 = _g11++;
							var c1 = seq1.mSeq.charAt(i1);
							var c2 = seq2.mSeq.charAt(i1);
							if(!(c1 == "A" || c1 == "T" || c1 == "G" || c1 == "C") || !(c2 == "A" || c2 == "T" || c2 == "G" || c2 == "C")) {
								continue;
							}
							if(c1 != c2) {
								++score;
							}
							++count1;
						}
						var res = count1 == 0 ? 1.0 : score / count1;
						result = res;
					}
					diff += result;
					++d;
				}
			}
			++c;
		}
	}
	if(count == 0) {
		return 0;
	}
	return diff / count;
};
kot_FourTimesRule.calcPairwiseDistanceOfSubClades = function(seqsA,seqsB) {
	console.log(Std.string(seqsA) + " " + Std.string(seqsA));
	var comparisons = 0;
	var diff = 0;
	var _g_head = seqsA.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var seq1 = val;
		var _g_head1 = seqsB.h;
		while(_g_head1 != null) {
			var val1 = _g_head1.item;
			_g_head1 = _g_head1.next;
			var seq2 = val1;
			var _g1 = 0;
			var _g = seq1.mNames.length;
			while(_g1 < _g) {
				var i = _g1++;
				var _g3 = 0;
				var _g2 = seq2.mNames.length;
				while(_g3 < _g2) {
					var j = _g3++;
					++comparisons;
					var result = 0;
					if(kot_FourTimesRule.distanceMatrix != null) {
						var _this = kot_FourTimesRule.distanceMatrix;
						var ret = 0;
						if(seq1 != seq2) {
							var _this1 = _this.mNamePosLookup.values;
							var key = seq1.hashCode();
							var pos1 = _this1.h[key];
							if(pos1 == null) {
								throw new js__$Boot_HaxeError(Std.string(seq1) + " not in map!");
							}
							var _this2 = _this.mNamePosLookup.values;
							var key1 = seq2.hashCode();
							var pos2 = _this2.h[key1];
							if(pos2 == null) {
								throw new js__$Boot_HaxeError(Std.string(seq2) + " not in map!");
							}
							if(pos1 > pos2) {
								var swap = pos1;
								pos1 = pos2;
								pos2 = swap;
							}
							ret = _this.mValues[pos1 + pos2 * _this.mWidth];
						}
						result = ret;
					} else {
						if((seq2.mSeq == null ? 0 : seq2.mSeq.length) != (seq1.mSeq == null ? 0 : seq1.mSeq.length)) {
							throw new js__$Boot_HaxeError("Cannot compare sequences of different length!");
						}
						var score = 0;
						var count = 0;
						var _g11 = 0;
						var _g4 = seq1.mSeq == null ? 0 : seq1.mSeq.length;
						while(_g11 < _g4) {
							var i1 = _g11++;
							var c1 = seq1.mSeq.charAt(i1);
							var c2 = seq2.mSeq.charAt(i1);
							if(!(c1 == "A" || c1 == "T" || c1 == "G" || c1 == "C") || !(c2 == "A" || c2 == "T" || c2 == "G" || c2 == "C")) {
								continue;
							}
							if(c1 != c2) {
								++score;
							}
							++count;
						}
						var res = count == 0 ? 1.0 : score / count;
						result = res;
					}
					diff += result;
				}
			}
		}
	}
	var result1 = 0;
	if(diff != 0) {
		result1 = -0.75 * Math.log(1 - 4 * diff / (3.0 * comparisons));
	}
	return result1;
};
kot_FourTimesRule.calcTheta = function(seqs,c) {
	var n = 0;
	var _g_head = seqs.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var seq = val;
		n += seq.mNames.length;
	}
	var count = 0;
	var diff = 0;
	var c1 = 0;
	var _g_head1 = seqs.h;
	while(_g_head1 != null) {
		var val1 = _g_head1.item;
		_g_head1 = _g_head1.next;
		var seq1 = val1;
		var _g1 = 0;
		var _g = seq1.mNames.length;
		while(_g1 < _g) {
			var i = _g1++;
			var d = 0;
			var _g2_head = seqs.h;
			while(_g2_head != null) {
				var val2 = _g2_head.item;
				_g2_head = _g2_head.next;
				var seq2 = val2;
				var _g3 = 0;
				var _g2 = seq2.mNames.length;
				while(_g3 < _g2) {
					var j = _g3++;
					if(c1 == d) {
						++d;
						continue;
					}
					++count;
					var result = 0;
					if(kot_FourTimesRule.distanceMatrix != null) {
						var _this = kot_FourTimesRule.distanceMatrix;
						var ret = 0;
						if(seq1 != seq2) {
							var _this1 = _this.mNamePosLookup.values;
							var key = seq1.hashCode();
							var pos1 = _this1.h[key];
							if(pos1 == null) {
								throw new js__$Boot_HaxeError(Std.string(seq1) + " not in map!");
							}
							var _this2 = _this.mNamePosLookup.values;
							var key1 = seq2.hashCode();
							var pos2 = _this2.h[key1];
							if(pos2 == null) {
								throw new js__$Boot_HaxeError(Std.string(seq2) + " not in map!");
							}
							if(pos1 > pos2) {
								var swap = pos1;
								pos1 = pos2;
								pos2 = swap;
							}
							ret = _this.mValues[pos1 + pos2 * _this.mWidth];
						}
						result = ret;
					} else {
						if((seq2.mSeq == null ? 0 : seq2.mSeq.length) != (seq1.mSeq == null ? 0 : seq1.mSeq.length)) {
							throw new js__$Boot_HaxeError("Cannot compare sequences of different length!");
						}
						var score = 0;
						var count1 = 0;
						var _g11 = 0;
						var _g4 = seq1.mSeq == null ? 0 : seq1.mSeq.length;
						while(_g11 < _g4) {
							var i1 = _g11++;
							var c11 = seq1.mSeq.charAt(i1);
							var c2 = seq2.mSeq.charAt(i1);
							if(!(c11 == "A" || c11 == "T" || c11 == "G" || c11 == "C") || !(c2 == "A" || c2 == "T" || c2 == "G" || c2 == "C")) {
								continue;
							}
							if(c11 != c2) {
								++score;
							}
							++count1;
						}
						var res = count1 == 0 ? 1.0 : score / count1;
						result = res;
					}
					diff += result;
					++d;
				}
			}
			++c1;
		}
	}
	var pairwiseDistance = count == 0 ? 0 : diff / count;
	var pi = 0;
	if(n == 1) {
		n = 2;
	}
	if(pairwiseDistance == 0) {
		var _this3 = seqs.first();
		var seqLen = _this3.mSeq == null ? 0 : _this3.mSeq.length;
		pairwiseDistance = 1 / seqLen;
		pi = 2 / (seqLen * n * (n - 1));
	} else {
		pi = pairwiseDistance;
	}
	return pi / (1 - 4 * pi / 3);
};
kot_FourTimesRule.getBestSubClades = function(subCladeA,subCladeB,c) {
	var l = new List();
	l.add(subCladeA.first());
	l.add(subCladeB.first());
	return l;
};
kot_FourTimesRule.mergeSpecies = function(cladeA,cladeB,spA,spB,l) {
	var _g_head = cladeA.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var lA = val;
		if(lA == spA) {
			continue;
		}
		l.add(lA);
	}
	var _g_head1 = cladeB.h;
	while(_g_head1 != null) {
		var val1 = _g_head1.item;
		_g_head1 = _g_head1.next;
		var lB = val1;
		if(lB == spB) {
			continue;
		}
		l.add(lB);
	}
	var u = new List();
	var _g_head2 = spA.h;
	while(_g_head2 != null) {
		var val2 = _g_head2.item;
		_g_head2 = _g_head2.next;
		var n1 = val2;
		u.add(n1);
	}
	var _g_head3 = spB.h;
	while(_g_head3 != null) {
		var val3 = _g_head3.item;
		_g_head3 = _g_head3.next;
		var n2 = val3;
		u.add(n2);
	}
	l.add(u);
};
kot_FourTimesRule.seqsInClade = function(c) {
	var l = new List();
	var _this = c.mConnectedInfo;
	var seq = __map_reserved["sequence"] != null ? _this.getReserved("sequence") : _this.h["sequence"];
	if(seq != null) {
		l.add(seq);
	}
	var _g_head = c.mChilds.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var subClade = val;
		var subL = kot_FourTimesRule.seqsInClade(subClade);
		var _g_head1 = subL.h;
		while(_g_head1 != null) {
			var val1 = _g_head1.item;
			_g_head1 = _g_head1.next;
			var s = val1;
			l.add(s);
		}
	}
	var _this1 = c.mConnectedInfo;
	if(__map_reserved["seqNames"] != null) {
		_this1.setReserved("seqNames",l);
	} else {
		_this1.h["seqNames"] = l;
	}
	return l;
};
kot_FourTimesRule.floatToStringPrecision = function(n,prec) {
	n = Math.round(n * Math.pow(10,prec));
	var str = "" + n;
	var len = str.length;
	if(len <= prec) {
		while(len < prec) {
			str = "0" + str;
			++len;
		}
		return "0." + str;
	} else {
		return HxOverrides.substr(str,0,str.length - prec) + "." + HxOverrides.substr(str,str.length - prec,null);
	}
};
kot_FourTimesRule.speciesInClade = function(c,decisionRatio,transitivity) {
	var l = new List();
	if(c.mChilds.length == 0) {
		var _this = c.mConnectedInfo;
		l.add(__map_reserved["seqNames"] != null ? _this.getReserved("seqNames") : _this.h["seqNames"]);
		return l;
	}
	var terminalSeqList = new List();
	var s = new List();
	var _g_head = c.mChilds.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var child = val;
		var sub = kot_FourTimesRule.speciesInClade(child,decisionRatio,transitivity);
		s.add(sub);
		var _this1 = child.mConnectedInfo;
		var childSeqs = __map_reserved["seqNames"] != null ? _this1.getReserved("seqNames") : _this1.h["seqNames"];
		var _g_head1 = childSeqs.h;
		while(_g_head1 != null) {
			var val1 = _g_head1.item;
			_g_head1 = _g_head1.next;
			var seq = val1;
			terminalSeqList.add(seq);
		}
	}
	var _this2 = c.mConnectedInfo;
	if(__map_reserved["seqNames"] != null) {
		_this2.setReserved("seqNames",terminalSeqList);
	} else {
		_this2.h["seqNames"] = terminalSeqList;
	}
	if(s.length != 2) {
		throw new js__$Boot_HaxeError("WTF?");
	}
	var sA = s.first();
	var sB = s.last();
	var nSpecies = sA.length + sB.length;
	console.log("=== " + Std.string(sA) + " " + Std.string(sB) + " ===");
	if(!transitivity) {
		var bestClades = kot_FourTimesRule.getBestSubClades(sA,sB,c);
		var seqsA = bestClades.first();
		var seqsB = bestClades.last();
		console.log(Std.string(seqsA) + " " + Std.string(seqsA));
		var comparisons = 0;
		var diff = 0;
		var _g_head2 = seqsA.h;
		while(_g_head2 != null) {
			var val2 = _g_head2.item;
			_g_head2 = _g_head2.next;
			var seq1 = val2;
			var _g_head3 = seqsB.h;
			while(_g_head3 != null) {
				var val3 = _g_head3.item;
				_g_head3 = _g_head3.next;
				var seq2 = val3;
				var _g1 = 0;
				var _g = seq1.mNames.length;
				while(_g1 < _g) {
					var i = _g1++;
					var _g3 = 0;
					var _g2 = seq2.mNames.length;
					while(_g3 < _g2) {
						var j = _g3++;
						++comparisons;
						var result = 0;
						if(kot_FourTimesRule.distanceMatrix != null) {
							var _this3 = kot_FourTimesRule.distanceMatrix;
							var ret = 0;
							if(seq1 != seq2) {
								var _this4 = _this3.mNamePosLookup.values;
								var key = seq1.hashCode();
								var pos1 = _this4.h[key];
								if(pos1 == null) {
									throw new js__$Boot_HaxeError(Std.string(seq1) + " not in map!");
								}
								var _this5 = _this3.mNamePosLookup.values;
								var key1 = seq2.hashCode();
								var pos2 = _this5.h[key1];
								if(pos2 == null) {
									throw new js__$Boot_HaxeError(Std.string(seq2) + " not in map!");
								}
								if(pos1 > pos2) {
									var swap = pos1;
									pos1 = pos2;
									pos2 = swap;
								}
								ret = _this3.mValues[pos1 + pos2 * _this3.mWidth];
							}
							result = ret;
						} else {
							if((seq2.mSeq == null ? 0 : seq2.mSeq.length) != (seq1.mSeq == null ? 0 : seq1.mSeq.length)) {
								throw new js__$Boot_HaxeError("Cannot compare sequences of different length!");
							}
							var score = 0;
							var count = 0;
							var _g11 = 0;
							var _g4 = seq1.mSeq == null ? 0 : seq1.mSeq.length;
							while(_g11 < _g4) {
								var i1 = _g11++;
								var c1 = seq1.mSeq.charAt(i1);
								var c2 = seq2.mSeq.charAt(i1);
								if(!(c1 == "A" || c1 == "T" || c1 == "G" || c1 == "C") || !(c2 == "A" || c2 == "T" || c2 == "G" || c2 == "C")) {
									continue;
								}
								if(c1 != c2) {
									++score;
								}
								++count;
							}
							var res = count == 0 ? 1.0 : score / count;
							result = res;
						}
						diff += result;
					}
				}
			}
		}
		var result1 = 0;
		if(diff != 0) {
			result1 = -0.75 * Math.log(1 - 4 * diff / (3.0 * comparisons));
		}
		var k = result1;
		var seqs = bestClades.first();
		var n = 0;
		var _g_head4 = seqs.h;
		while(_g_head4 != null) {
			var val4 = _g_head4.item;
			_g_head4 = _g_head4.next;
			var seq3 = val4;
			n += seq3.mNames.length;
		}
		var count1 = 0;
		var diff1 = 0;
		var c3 = 0;
		var _g_head5 = seqs.h;
		while(_g_head5 != null) {
			var val5 = _g_head5.item;
			_g_head5 = _g_head5.next;
			var seq11 = val5;
			var _g12 = 0;
			var _g5 = seq11.mNames.length;
			while(_g12 < _g5) {
				var i2 = _g12++;
				var d = 0;
				var _g2_head = seqs.h;
				while(_g2_head != null) {
					var val6 = _g2_head.item;
					_g2_head = _g2_head.next;
					var seq21 = val6;
					var _g31 = 0;
					var _g21 = seq21.mNames.length;
					while(_g31 < _g21) {
						var j1 = _g31++;
						if(c3 == d) {
							++d;
							continue;
						}
						++count1;
						var result2 = 0;
						if(kot_FourTimesRule.distanceMatrix != null) {
							var _this6 = kot_FourTimesRule.distanceMatrix;
							var ret1 = 0;
							if(seq11 != seq21) {
								var _this7 = _this6.mNamePosLookup.values;
								var key2 = seq11.hashCode();
								var pos11 = _this7.h[key2];
								if(pos11 == null) {
									throw new js__$Boot_HaxeError(Std.string(seq11) + " not in map!");
								}
								var _this8 = _this6.mNamePosLookup.values;
								var key3 = seq21.hashCode();
								var pos21 = _this8.h[key3];
								if(pos21 == null) {
									throw new js__$Boot_HaxeError(Std.string(seq21) + " not in map!");
								}
								if(pos11 > pos21) {
									var swap1 = pos11;
									pos11 = pos21;
									pos21 = swap1;
								}
								ret1 = _this6.mValues[pos11 + pos21 * _this6.mWidth];
							}
							result2 = ret1;
						} else {
							if((seq21.mSeq == null ? 0 : seq21.mSeq.length) != (seq11.mSeq == null ? 0 : seq11.mSeq.length)) {
								throw new js__$Boot_HaxeError("Cannot compare sequences of different length!");
							}
							var score1 = 0;
							var count2 = 0;
							var _g13 = 0;
							var _g6 = seq11.mSeq == null ? 0 : seq11.mSeq.length;
							while(_g13 < _g6) {
								var i3 = _g13++;
								var c11 = seq11.mSeq.charAt(i3);
								var c21 = seq21.mSeq.charAt(i3);
								if(!(c11 == "A" || c11 == "T" || c11 == "G" || c11 == "C") || !(c21 == "A" || c21 == "T" || c21 == "G" || c21 == "C")) {
									continue;
								}
								if(c11 != c21) {
									++score1;
								}
								++count2;
							}
							var res1 = count2 == 0 ? 1.0 : score1 / count2;
							result2 = res1;
						}
						diff1 += result2;
						++d;
					}
				}
				++c3;
			}
		}
		var pairwiseDistance = count1 == 0 ? 0 : diff1 / count1;
		var pi = 0;
		if(n == 1) {
			n = 2;
		}
		if(pairwiseDistance == 0) {
			var _this9 = seqs.first();
			var seqLen = _this9.mSeq == null ? 0 : _this9.mSeq.length;
			pairwiseDistance = 1 / seqLen;
			pi = 2 / (seqLen * n * (n - 1));
		} else {
			pi = pairwiseDistance;
		}
		var theta1 = pi / (1 - 4 * pi / 3);
		var seqs1 = bestClades.last();
		var n1 = 0;
		var _g_head6 = seqs1.h;
		while(_g_head6 != null) {
			var val7 = _g_head6.item;
			_g_head6 = _g_head6.next;
			var seq4 = val7;
			n1 += seq4.mNames.length;
		}
		var count3 = 0;
		var diff2 = 0;
		var c4 = 0;
		var _g_head7 = seqs1.h;
		while(_g_head7 != null) {
			var val8 = _g_head7.item;
			_g_head7 = _g_head7.next;
			var seq12 = val8;
			var _g14 = 0;
			var _g7 = seq12.mNames.length;
			while(_g14 < _g7) {
				var i4 = _g14++;
				var d1 = 0;
				var _g2_head1 = seqs1.h;
				while(_g2_head1 != null) {
					var val9 = _g2_head1.item;
					_g2_head1 = _g2_head1.next;
					var seq22 = val9;
					var _g32 = 0;
					var _g22 = seq22.mNames.length;
					while(_g32 < _g22) {
						var j2 = _g32++;
						if(c4 == d1) {
							++d1;
							continue;
						}
						++count3;
						var result3 = 0;
						if(kot_FourTimesRule.distanceMatrix != null) {
							var _this10 = kot_FourTimesRule.distanceMatrix;
							var ret2 = 0;
							if(seq12 != seq22) {
								var _this11 = _this10.mNamePosLookup.values;
								var key4 = seq12.hashCode();
								var pos12 = _this11.h[key4];
								if(pos12 == null) {
									throw new js__$Boot_HaxeError(Std.string(seq12) + " not in map!");
								}
								var _this12 = _this10.mNamePosLookup.values;
								var key5 = seq22.hashCode();
								var pos22 = _this12.h[key5];
								if(pos22 == null) {
									throw new js__$Boot_HaxeError(Std.string(seq22) + " not in map!");
								}
								if(pos12 > pos22) {
									var swap2 = pos12;
									pos12 = pos22;
									pos22 = swap2;
								}
								ret2 = _this10.mValues[pos12 + pos22 * _this10.mWidth];
							}
							result3 = ret2;
						} else {
							if((seq22.mSeq == null ? 0 : seq22.mSeq.length) != (seq12.mSeq == null ? 0 : seq12.mSeq.length)) {
								throw new js__$Boot_HaxeError("Cannot compare sequences of different length!");
							}
							var score2 = 0;
							var count4 = 0;
							var _g15 = 0;
							var _g8 = seq12.mSeq == null ? 0 : seq12.mSeq.length;
							while(_g15 < _g8) {
								var i5 = _g15++;
								var c12 = seq12.mSeq.charAt(i5);
								var c22 = seq22.mSeq.charAt(i5);
								if(!(c12 == "A" || c12 == "T" || c12 == "G" || c12 == "C") || !(c22 == "A" || c22 == "T" || c22 == "G" || c22 == "C")) {
									continue;
								}
								if(c12 != c22) {
									++score2;
								}
								++count4;
							}
							var res2 = count4 == 0 ? 1.0 : score2 / count4;
							result3 = res2;
						}
						diff2 += result3;
						++d1;
					}
				}
				++c4;
			}
		}
		var pairwiseDistance1 = count3 == 0 ? 0 : diff2 / count3;
		var pi1 = 0;
		if(n1 == 1) {
			n1 = 2;
		}
		if(pairwiseDistance1 == 0) {
			var _this13 = seqs1.first();
			var seqLen1 = _this13.mSeq == null ? 0 : _this13.mSeq.length;
			pairwiseDistance1 = 1 / seqLen1;
			pi1 = 2 / (seqLen1 * n1 * (n1 - 1));
		} else {
			pi1 = pairwiseDistance1;
		}
		var theta2 = pi1 / (1 - 4 * pi1 / 3);
		var info = kot_FourTimesRule.floatToStringPrecision(theta1,5) + "(" + bestClades.first().length + ") " + kot_FourTimesRule.floatToStringPrecision(theta2,5) + "(" + bestClades.last().length + ")";
		c.mInfo.add(info);
		var theta = theta1 > theta2 ? theta1 : theta2;
		if(theta != -1) {
			var ratio = k / theta;
			var info1 = kot_FourTimesRule.floatToStringPrecision(k,5) + "/" + kot_FourTimesRule.floatToStringPrecision(theta,5) + "=" + kot_FourTimesRule.floatToStringPrecision(ratio,5);
			c.mInfo.add(info1);
			if(ratio >= decisionRatio) {
				var _g_head8 = sA.h;
				while(_g_head8 != null) {
					var val10 = _g_head8.item;
					_g_head8 = _g_head8.next;
					var n11 = val10;
					l.add(n11);
				}
				var _g_head9 = sB.h;
				while(_g_head9 != null) {
					var val11 = _g_head9.item;
					_g_head9 = _g_head9.next;
					var n2 = val11;
					l.add(n2);
				}
			} else {
				kot_FourTimesRule.mergeSpecies(sA,sB,bestClades.first(),bestClades.last(),l);
			}
		} else {
			kot_FourTimesRule.mergeSpecies(sA,sB,bestClades.first(),bestClades.last(),l);
		}
	} else if(transitivity) {
		var goOn = false;
		var bestClades1 = kot_FourTimesRule.getBestSubClades(sA,sB,c);
		var seqsA1 = bestClades1.first();
		var seqsB1 = bestClades1.last();
		console.log(Std.string(seqsA1) + " " + Std.string(seqsA1));
		var comparisons1 = 0;
		var diff3 = 0;
		var _g_head10 = seqsA1.h;
		while(_g_head10 != null) {
			var val12 = _g_head10.item;
			_g_head10 = _g_head10.next;
			var seq13 = val12;
			var _g_head11 = seqsB1.h;
			while(_g_head11 != null) {
				var val13 = _g_head11.item;
				_g_head11 = _g_head11.next;
				var seq23 = val13;
				var _g16 = 0;
				var _g9 = seq13.mNames.length;
				while(_g16 < _g9) {
					var i6 = _g16++;
					var _g33 = 0;
					var _g23 = seq23.mNames.length;
					while(_g33 < _g23) {
						var j3 = _g33++;
						++comparisons1;
						var result4 = 0;
						if(kot_FourTimesRule.distanceMatrix != null) {
							var _this14 = kot_FourTimesRule.distanceMatrix;
							var ret3 = 0;
							if(seq13 != seq23) {
								var _this15 = _this14.mNamePosLookup.values;
								var key6 = seq13.hashCode();
								var pos13 = _this15.h[key6];
								if(pos13 == null) {
									throw new js__$Boot_HaxeError(Std.string(seq13) + " not in map!");
								}
								var _this16 = _this14.mNamePosLookup.values;
								var key7 = seq23.hashCode();
								var pos23 = _this16.h[key7];
								if(pos23 == null) {
									throw new js__$Boot_HaxeError(Std.string(seq23) + " not in map!");
								}
								if(pos13 > pos23) {
									var swap3 = pos13;
									pos13 = pos23;
									pos23 = swap3;
								}
								ret3 = _this14.mValues[pos13 + pos23 * _this14.mWidth];
							}
							result4 = ret3;
						} else {
							if((seq23.mSeq == null ? 0 : seq23.mSeq.length) != (seq13.mSeq == null ? 0 : seq13.mSeq.length)) {
								throw new js__$Boot_HaxeError("Cannot compare sequences of different length!");
							}
							var score3 = 0;
							var count5 = 0;
							var _g17 = 0;
							var _g10 = seq13.mSeq == null ? 0 : seq13.mSeq.length;
							while(_g17 < _g10) {
								var i7 = _g17++;
								var c13 = seq13.mSeq.charAt(i7);
								var c23 = seq23.mSeq.charAt(i7);
								if(!(c13 == "A" || c13 == "T" || c13 == "G" || c13 == "C") || !(c23 == "A" || c23 == "T" || c23 == "G" || c23 == "C")) {
									continue;
								}
								if(c13 != c23) {
									++score3;
								}
								++count5;
							}
							var res3 = count5 == 0 ? 1.0 : score3 / count5;
							result4 = res3;
						}
						diff3 += result4;
					}
				}
			}
		}
		var result5 = 0;
		if(diff3 != 0) {
			result5 = -0.75 * Math.log(1 - 4 * diff3 / (3.0 * comparisons1));
		}
		var k1 = result5;
		var seqs2 = bestClades1.first();
		var n3 = 0;
		var _g_head12 = seqs2.h;
		while(_g_head12 != null) {
			var val14 = _g_head12.item;
			_g_head12 = _g_head12.next;
			var seq5 = val14;
			n3 += seq5.mNames.length;
		}
		var count6 = 0;
		var diff4 = 0;
		var c5 = 0;
		var _g_head13 = seqs2.h;
		while(_g_head13 != null) {
			var val15 = _g_head13.item;
			_g_head13 = _g_head13.next;
			var seq14 = val15;
			var _g18 = 0;
			var _g19 = seq14.mNames.length;
			while(_g18 < _g19) {
				var i8 = _g18++;
				var d2 = 0;
				var _g2_head2 = seqs2.h;
				while(_g2_head2 != null) {
					var val16 = _g2_head2.item;
					_g2_head2 = _g2_head2.next;
					var seq24 = val16;
					var _g34 = 0;
					var _g24 = seq24.mNames.length;
					while(_g34 < _g24) {
						var j4 = _g34++;
						if(c5 == d2) {
							++d2;
							continue;
						}
						++count6;
						var result6 = 0;
						if(kot_FourTimesRule.distanceMatrix != null) {
							var _this17 = kot_FourTimesRule.distanceMatrix;
							var ret4 = 0;
							if(seq14 != seq24) {
								var _this18 = _this17.mNamePosLookup.values;
								var key8 = seq14.hashCode();
								var pos14 = _this18.h[key8];
								if(pos14 == null) {
									throw new js__$Boot_HaxeError(Std.string(seq14) + " not in map!");
								}
								var _this19 = _this17.mNamePosLookup.values;
								var key9 = seq24.hashCode();
								var pos24 = _this19.h[key9];
								if(pos24 == null) {
									throw new js__$Boot_HaxeError(Std.string(seq24) + " not in map!");
								}
								if(pos14 > pos24) {
									var swap4 = pos14;
									pos14 = pos24;
									pos24 = swap4;
								}
								ret4 = _this17.mValues[pos14 + pos24 * _this17.mWidth];
							}
							result6 = ret4;
						} else {
							if((seq24.mSeq == null ? 0 : seq24.mSeq.length) != (seq14.mSeq == null ? 0 : seq14.mSeq.length)) {
								throw new js__$Boot_HaxeError("Cannot compare sequences of different length!");
							}
							var score4 = 0;
							var count7 = 0;
							var _g110 = 0;
							var _g20 = seq14.mSeq == null ? 0 : seq14.mSeq.length;
							while(_g110 < _g20) {
								var i9 = _g110++;
								var c14 = seq14.mSeq.charAt(i9);
								var c24 = seq24.mSeq.charAt(i9);
								if(!(c14 == "A" || c14 == "T" || c14 == "G" || c14 == "C") || !(c24 == "A" || c24 == "T" || c24 == "G" || c24 == "C")) {
									continue;
								}
								if(c14 != c24) {
									++score4;
								}
								++count7;
							}
							var res4 = count7 == 0 ? 1.0 : score4 / count7;
							result6 = res4;
						}
						diff4 += result6;
						++d2;
					}
				}
				++c5;
			}
		}
		var pairwiseDistance2 = count6 == 0 ? 0 : diff4 / count6;
		var pi2 = 0;
		if(n3 == 1) {
			n3 = 2;
		}
		if(pairwiseDistance2 == 0) {
			var _this20 = seqs2.first();
			var seqLen2 = _this20.mSeq == null ? 0 : _this20.mSeq.length;
			pairwiseDistance2 = 1 / seqLen2;
			pi2 = 2 / (seqLen2 * n3 * (n3 - 1));
		} else {
			pi2 = pairwiseDistance2;
		}
		var theta11 = pi2 / (1 - 4 * pi2 / 3);
		var seqs3 = bestClades1.last();
		var n4 = 0;
		var _g_head14 = seqs3.h;
		while(_g_head14 != null) {
			var val17 = _g_head14.item;
			_g_head14 = _g_head14.next;
			var seq6 = val17;
			n4 += seq6.mNames.length;
		}
		var count8 = 0;
		var diff5 = 0;
		var c6 = 0;
		var _g_head15 = seqs3.h;
		while(_g_head15 != null) {
			var val18 = _g_head15.item;
			_g_head15 = _g_head15.next;
			var seq15 = val18;
			var _g111 = 0;
			var _g25 = seq15.mNames.length;
			while(_g111 < _g25) {
				var i10 = _g111++;
				var d3 = 0;
				var _g2_head3 = seqs3.h;
				while(_g2_head3 != null) {
					var val19 = _g2_head3.item;
					_g2_head3 = _g2_head3.next;
					var seq25 = val19;
					var _g35 = 0;
					var _g26 = seq25.mNames.length;
					while(_g35 < _g26) {
						var j5 = _g35++;
						if(c6 == d3) {
							++d3;
							continue;
						}
						++count8;
						var result7 = 0;
						if(kot_FourTimesRule.distanceMatrix != null) {
							var _this21 = kot_FourTimesRule.distanceMatrix;
							var ret5 = 0;
							if(seq15 != seq25) {
								var _this22 = _this21.mNamePosLookup.values;
								var key10 = seq15.hashCode();
								var pos15 = _this22.h[key10];
								if(pos15 == null) {
									throw new js__$Boot_HaxeError(Std.string(seq15) + " not in map!");
								}
								var _this23 = _this21.mNamePosLookup.values;
								var key11 = seq25.hashCode();
								var pos25 = _this23.h[key11];
								if(pos25 == null) {
									throw new js__$Boot_HaxeError(Std.string(seq25) + " not in map!");
								}
								if(pos15 > pos25) {
									var swap5 = pos15;
									pos15 = pos25;
									pos25 = swap5;
								}
								ret5 = _this21.mValues[pos15 + pos25 * _this21.mWidth];
							}
							result7 = ret5;
						} else {
							if((seq25.mSeq == null ? 0 : seq25.mSeq.length) != (seq15.mSeq == null ? 0 : seq15.mSeq.length)) {
								throw new js__$Boot_HaxeError("Cannot compare sequences of different length!");
							}
							var score5 = 0;
							var count9 = 0;
							var _g112 = 0;
							var _g27 = seq15.mSeq == null ? 0 : seq15.mSeq.length;
							while(_g112 < _g27) {
								var i11 = _g112++;
								var c15 = seq15.mSeq.charAt(i11);
								var c25 = seq25.mSeq.charAt(i11);
								if(!(c15 == "A" || c15 == "T" || c15 == "G" || c15 == "C") || !(c25 == "A" || c25 == "T" || c25 == "G" || c25 == "C")) {
									continue;
								}
								if(c15 != c25) {
									++score5;
								}
								++count9;
							}
							var res5 = count9 == 0 ? 1.0 : score5 / count9;
							result7 = res5;
						}
						diff5 += result7;
						++d3;
					}
				}
				++c6;
			}
		}
		var pairwiseDistance3 = count8 == 0 ? 0 : diff5 / count8;
		var pi3 = 0;
		if(n4 == 1) {
			n4 = 2;
		}
		if(pairwiseDistance3 == 0) {
			var _this24 = seqs3.first();
			var seqLen3 = _this24.mSeq == null ? 0 : _this24.mSeq.length;
			pairwiseDistance3 = 1 / seqLen3;
			pi3 = 2 / (seqLen3 * n4 * (n4 - 1));
		} else {
			pi3 = pairwiseDistance3;
		}
		var theta21 = pi3 / (1 - 4 * pi3 / 3);
		var info2 = kot_FourTimesRule.floatToStringPrecision(theta11,5) + "(" + bestClades1.first().length + ") " + kot_FourTimesRule.floatToStringPrecision(theta21,5) + "(" + bestClades1.last().length + ")";
		c.mInfo.add(info2);
		var theta3 = theta11 > theta21 ? theta11 : theta21;
		if(theta3 != -1) {
			var ratio1 = k1 / theta3;
			var info3 = kot_FourTimesRule.floatToStringPrecision(k1,5) + "/" + kot_FourTimesRule.floatToStringPrecision(theta3,5) + "=" + kot_FourTimesRule.floatToStringPrecision(ratio1,5);
			c.mInfo.add(info3);
			if(ratio1 < decisionRatio) {
				goOn = true;
			}
		}
		var _g_head16 = sA.h;
		while(_g_head16 != null) {
			var val20 = _g_head16.item;
			_g_head16 = _g_head16.next;
			var n12 = val20;
			l.add(n12);
		}
		var _g_head17 = sB.h;
		while(_g_head17 != null) {
			var val21 = _g_head17.item;
			_g_head17 = _g_head17.next;
			var n21 = val21;
			l.add(n21);
		}
		while(goOn) {
			var toCombine = new haxe_ds_IntMap();
			var _g113 = 0;
			var _g28 = l.length;
			while(_g113 < _g28) {
				var i12 = _g113++;
				var lxxx = new List();
				lxxx.add(i12 + 1);
				toCombine.h[i12 + 1] = lxxx;
			}
			goOn = false;
			var i13 = 0;
			var _g_head18 = l.h;
			while(_g_head18 != null) {
				var val22 = _g_head18.item;
				_g_head18 = _g_head18.next;
				var s1 = val22;
				++i13;
				var j6 = 0;
				var _g_head19 = l.h;
				while(_g_head19 != null) {
					var val23 = _g_head19.item;
					_g_head19 = _g_head19.next;
					var s2 = val23;
					++j6;
					if(i13 >= j6) {
						continue;
					}
					console.log(Std.string(s1) + " " + Std.string(s1));
					var comparisons2 = 0;
					var diff6 = 0;
					var _g_head20 = s1.h;
					while(_g_head20 != null) {
						var val24 = _g_head20.item;
						_g_head20 = _g_head20.next;
						var seq16 = val24;
						var _g_head21 = s2.h;
						while(_g_head21 != null) {
							var val25 = _g_head21.item;
							_g_head21 = _g_head21.next;
							var seq26 = val25;
							var _g114 = 0;
							var _g29 = seq16.mNames.length;
							while(_g114 < _g29) {
								var i14 = _g114++;
								var _g36 = 0;
								var _g210 = seq26.mNames.length;
								while(_g36 < _g210) {
									var j7 = _g36++;
									++comparisons2;
									var result8 = 0;
									if(kot_FourTimesRule.distanceMatrix != null) {
										var _this25 = kot_FourTimesRule.distanceMatrix;
										var ret6 = 0;
										if(seq16 != seq26) {
											var _this26 = _this25.mNamePosLookup.values;
											var key12 = seq16.hashCode();
											var pos16 = _this26.h[key12];
											if(pos16 == null) {
												throw new js__$Boot_HaxeError(Std.string(seq16) + " not in map!");
											}
											var _this27 = _this25.mNamePosLookup.values;
											var key13 = seq26.hashCode();
											var pos26 = _this27.h[key13];
											if(pos26 == null) {
												throw new js__$Boot_HaxeError(Std.string(seq26) + " not in map!");
											}
											if(pos16 > pos26) {
												var swap6 = pos16;
												pos16 = pos26;
												pos26 = swap6;
											}
											ret6 = _this25.mValues[pos16 + pos26 * _this25.mWidth];
										}
										result8 = ret6;
									} else {
										if((seq26.mSeq == null ? 0 : seq26.mSeq.length) != (seq16.mSeq == null ? 0 : seq16.mSeq.length)) {
											throw new js__$Boot_HaxeError("Cannot compare sequences of different length!");
										}
										var score6 = 0;
										var count10 = 0;
										var _g115 = 0;
										var _g30 = seq16.mSeq == null ? 0 : seq16.mSeq.length;
										while(_g115 < _g30) {
											var i15 = _g115++;
											var c16 = seq16.mSeq.charAt(i15);
											var c26 = seq26.mSeq.charAt(i15);
											if(!(c16 == "A" || c16 == "T" || c16 == "G" || c16 == "C") || !(c26 == "A" || c26 == "T" || c26 == "G" || c26 == "C")) {
												continue;
											}
											if(c16 != c26) {
												++score6;
											}
											++count10;
										}
										var res6 = count10 == 0 ? 1.0 : score6 / count10;
										result8 = res6;
									}
									diff6 += result8;
								}
							}
						}
					}
					var result9 = 0;
					if(diff6 != 0) {
						result9 = -0.75 * Math.log(1 - 4 * diff6 / (3.0 * comparisons2));
					}
					var k2 = result9;
					var n5 = 0;
					var _g_head22 = s1.h;
					while(_g_head22 != null) {
						var val26 = _g_head22.item;
						_g_head22 = _g_head22.next;
						var seq7 = val26;
						n5 += seq7.mNames.length;
					}
					var count11 = 0;
					var diff7 = 0;
					var c7 = 0;
					var _g_head23 = s1.h;
					while(_g_head23 != null) {
						var val27 = _g_head23.item;
						_g_head23 = _g_head23.next;
						var seq17 = val27;
						var _g116 = 0;
						var _g37 = seq17.mNames.length;
						while(_g116 < _g37) {
							var i16 = _g116++;
							var d4 = 0;
							var _g2_head4 = s1.h;
							while(_g2_head4 != null) {
								var val28 = _g2_head4.item;
								_g2_head4 = _g2_head4.next;
								var seq27 = val28;
								var _g38 = 0;
								var _g211 = seq27.mNames.length;
								while(_g38 < _g211) {
									var j8 = _g38++;
									if(c7 == d4) {
										++d4;
										continue;
									}
									++count11;
									var result10 = 0;
									if(kot_FourTimesRule.distanceMatrix != null) {
										var _this28 = kot_FourTimesRule.distanceMatrix;
										var ret7 = 0;
										if(seq17 != seq27) {
											var _this29 = _this28.mNamePosLookup.values;
											var key14 = seq17.hashCode();
											var pos17 = _this29.h[key14];
											if(pos17 == null) {
												throw new js__$Boot_HaxeError(Std.string(seq17) + " not in map!");
											}
											var _this30 = _this28.mNamePosLookup.values;
											var key15 = seq27.hashCode();
											var pos27 = _this30.h[key15];
											if(pos27 == null) {
												throw new js__$Boot_HaxeError(Std.string(seq27) + " not in map!");
											}
											if(pos17 > pos27) {
												var swap7 = pos17;
												pos17 = pos27;
												pos27 = swap7;
											}
											ret7 = _this28.mValues[pos17 + pos27 * _this28.mWidth];
										}
										result10 = ret7;
									} else {
										if((seq27.mSeq == null ? 0 : seq27.mSeq.length) != (seq17.mSeq == null ? 0 : seq17.mSeq.length)) {
											throw new js__$Boot_HaxeError("Cannot compare sequences of different length!");
										}
										var score7 = 0;
										var count12 = 0;
										var _g117 = 0;
										var _g39 = seq17.mSeq == null ? 0 : seq17.mSeq.length;
										while(_g117 < _g39) {
											var i17 = _g117++;
											var c17 = seq17.mSeq.charAt(i17);
											var c27 = seq27.mSeq.charAt(i17);
											if(!(c17 == "A" || c17 == "T" || c17 == "G" || c17 == "C") || !(c27 == "A" || c27 == "T" || c27 == "G" || c27 == "C")) {
												continue;
											}
											if(c17 != c27) {
												++score7;
											}
											++count12;
										}
										var res7 = count12 == 0 ? 1.0 : score7 / count12;
										result10 = res7;
									}
									diff7 += result10;
									++d4;
								}
							}
							++c7;
						}
					}
					var pairwiseDistance4 = count11 == 0 ? 0 : diff7 / count11;
					var pi4 = 0;
					if(n5 == 1) {
						n5 = 2;
					}
					if(pairwiseDistance4 == 0) {
						var _this31 = s1.first();
						var seqLen4 = _this31.mSeq == null ? 0 : _this31.mSeq.length;
						pairwiseDistance4 = 1 / seqLen4;
						pi4 = 2 / (seqLen4 * n5 * (n5 - 1));
					} else {
						pi4 = pairwiseDistance4;
					}
					var theta12 = pi4 / (1 - 4 * pi4 / 3);
					var n6 = 0;
					var _g_head24 = s2.h;
					while(_g_head24 != null) {
						var val29 = _g_head24.item;
						_g_head24 = _g_head24.next;
						var seq8 = val29;
						n6 += seq8.mNames.length;
					}
					var count13 = 0;
					var diff8 = 0;
					var c8 = 0;
					var _g_head25 = s2.h;
					while(_g_head25 != null) {
						var val30 = _g_head25.item;
						_g_head25 = _g_head25.next;
						var seq18 = val30;
						var _g118 = 0;
						var _g40 = seq18.mNames.length;
						while(_g118 < _g40) {
							var i18 = _g118++;
							var d5 = 0;
							var _g2_head5 = s2.h;
							while(_g2_head5 != null) {
								var val31 = _g2_head5.item;
								_g2_head5 = _g2_head5.next;
								var seq28 = val31;
								var _g310 = 0;
								var _g212 = seq28.mNames.length;
								while(_g310 < _g212) {
									var j9 = _g310++;
									if(c8 == d5) {
										++d5;
										continue;
									}
									++count13;
									var result11 = 0;
									if(kot_FourTimesRule.distanceMatrix != null) {
										var _this32 = kot_FourTimesRule.distanceMatrix;
										var ret8 = 0;
										if(seq18 != seq28) {
											var _this33 = _this32.mNamePosLookup.values;
											var key16 = seq18.hashCode();
											var pos18 = _this33.h[key16];
											if(pos18 == null) {
												throw new js__$Boot_HaxeError(Std.string(seq18) + " not in map!");
											}
											var _this34 = _this32.mNamePosLookup.values;
											var key17 = seq28.hashCode();
											var pos28 = _this34.h[key17];
											if(pos28 == null) {
												throw new js__$Boot_HaxeError(Std.string(seq28) + " not in map!");
											}
											if(pos18 > pos28) {
												var swap8 = pos18;
												pos18 = pos28;
												pos28 = swap8;
											}
											ret8 = _this32.mValues[pos18 + pos28 * _this32.mWidth];
										}
										result11 = ret8;
									} else {
										if((seq28.mSeq == null ? 0 : seq28.mSeq.length) != (seq18.mSeq == null ? 0 : seq18.mSeq.length)) {
											throw new js__$Boot_HaxeError("Cannot compare sequences of different length!");
										}
										var score8 = 0;
										var count14 = 0;
										var _g119 = 0;
										var _g41 = seq18.mSeq == null ? 0 : seq18.mSeq.length;
										while(_g119 < _g41) {
											var i19 = _g119++;
											var c18 = seq18.mSeq.charAt(i19);
											var c28 = seq28.mSeq.charAt(i19);
											if(!(c18 == "A" || c18 == "T" || c18 == "G" || c18 == "C") || !(c28 == "A" || c28 == "T" || c28 == "G" || c28 == "C")) {
												continue;
											}
											if(c18 != c28) {
												++score8;
											}
											++count14;
										}
										var res8 = count14 == 0 ? 1.0 : score8 / count14;
										result11 = res8;
									}
									diff8 += result11;
									++d5;
								}
							}
							++c8;
						}
					}
					var pairwiseDistance5 = count13 == 0 ? 0 : diff8 / count13;
					var pi5 = 0;
					if(n6 == 1) {
						n6 = 2;
					}
					if(pairwiseDistance5 == 0) {
						var _this35 = s2.first();
						var seqLen5 = _this35.mSeq == null ? 0 : _this35.mSeq.length;
						pairwiseDistance5 = 1 / seqLen5;
						pi5 = 2 / (seqLen5 * n6 * (n6 - 1));
					} else {
						pi5 = pairwiseDistance5;
					}
					var theta22 = pi5 / (1 - 4 * pi5 / 3);
					c.mInfo.add(Std.string(s1) + " " + Std.string(s2));
					var info4 = kot_FourTimesRule.floatToStringPrecision(theta12,5) + "(" + s1.length + ") " + kot_FourTimesRule.floatToStringPrecision(theta22,5) + "(" + s2.length + ")";
					c.mInfo.add(info4);
					var theta4 = theta12 > theta22 ? theta12 : theta22;
					if(theta4 != -1) {
						var ratio2 = k2 / theta4;
						var info5 = kot_FourTimesRule.floatToStringPrecision(k2,5) + "/" + kot_FourTimesRule.floatToStringPrecision(theta4,5) + "=" + kot_FourTimesRule.floatToStringPrecision(ratio2,5);
						c.mInfo.add(info5);
						if(ratio2 < decisionRatio) {
							goOn = true;
							var combined = new List();
							combined.add(i13);
							combined.add(j6);
							if(toCombine.h.hasOwnProperty(i13)) {
								var xI = toCombine.h[i13];
								var _g_head26 = xI.h;
								while(_g_head26 != null) {
									var val32 = _g_head26.item;
									_g_head26 = _g_head26.next;
									var s3 = val32;
									combined.add(s3);
								}
								toCombine.remove(i13);
							}
							if(toCombine.h.hasOwnProperty(j6)) {
								var xJ = toCombine.h[j6];
								var _g_head27 = xJ.h;
								while(_g_head27 != null) {
									var val33 = _g_head27.item;
									_g_head27 = _g_head27.next;
									var s4 = val33;
									combined.add(s4);
								}
								toCombine.remove(j6);
							}
							var minVal = i13 > j6 ? j6 : i13;
							toCombine.h[minVal] = combined;
						}
					}
				}
			}
			console.log("toCombine: " + Std.string(toCombine));
			var newL = new List();
			var xL = toCombine.iterator();
			while(xL.hasNext()) {
				var xL1 = xL.next();
				var alreadyDone_h = { };
				var sL = new List();
				if(xL1.isEmpty()) {
					throw new js__$Boot_HaxeError("sL is Empty " + Std.string(toCombine));
				}
				var _g_head28 = xL1.h;
				while(_g_head28 != null) {
					var val34 = _g_head28.item;
					_g_head28 = _g_head28.next;
					var x = val34;
					if(alreadyDone_h.hasOwnProperty(x)) {
						continue;
					}
					var idx = 0;
					var _g_head29 = l.h;
					while(_g_head29 != null) {
						var val35 = _g_head29.item;
						_g_head29 = _g_head29.next;
						var s11 = val35;
						++idx;
						if(idx == x) {
							var _g_head30 = s11.h;
							while(_g_head30 != null) {
								var val36 = _g_head30.item;
								_g_head30 = _g_head30.next;
								var ele = val36;
								sL.add(ele);
							}
							break;
						}
					}
					if(sL.isEmpty()) {
						throw new js__$Boot_HaxeError("Index " + x + " not found!");
					}
					alreadyDone_h[x] = true;
				}
				newL.add(sL);
			}
			l = newL;
		}
	} else {
		var _g_head31 = sA.h;
		while(_g_head31 != null) {
			var val37 = _g_head31.item;
			_g_head31 = _g_head31.next;
			var n13 = val37;
			l.add(n13);
		}
		var _g_head32 = sB.h;
		while(_g_head32 != null) {
			var val38 = _g_head32.item;
			_g_head32 = _g_head32.next;
			var n22 = val38;
			l.add(n22);
		}
	}
	c.mInfo.add("" + Std.string(l));
	console.log("output: " + Std.string(l) + " " + l.length);
	return l;
};
kot_FourTimesRule.initColors = function(c,l) {
	var _this = c.mConnectedInfo;
	var value = l.first();
	if(__map_reserved["psppl"] != null) {
		_this.setReserved("psppl",value);
	} else {
		_this.h["psppl"] = value;
	}
};
kot_FourTimesRule.doRule = function(c,decisionRatio,transitivity) {
	kot_FourTimesRule.seqsInClade(c);
	var result = kot_FourTimesRule.speciesInClade(c,decisionRatio,transitivity);
	kot_FourTimesRule.initColors(c,result);
	return result;
};
var kot_Graph = function(nodeInfo) {
	var this1 = new haxe_ds__$HashMap_HashMapData();
	this.mNodes = this1;
	if(nodeInfo != null) {
		var _g = 0;
		while(_g < nodeInfo.length) {
			var node = nodeInfo[_g];
			++_g;
			var gn = new kot_GraphNode(node);
			var this2 = this.mNodes;
			var _this = this2.keys;
			var key = node.hashCode();
			_this.h[key] = node;
			var _this1 = this2.values;
			var key1 = node.hashCode();
			_this1.h[key1] = gn;
		}
	}
};
kot_Graph.__name__ = true;
kot_Graph.prototype = {
	getLeafs: function() {
		var result = new List();
		var node = this.mNodes.values.iterator();
		while(node.hasNext()) {
			var node1 = node.next();
			var ele = node1.mEleObject;
			if(node1.mConnectedEdges.length >= 2) {
				continue;
			}
			result.add(ele);
		}
		return result;
	}
	,addNode: function(ele) {
		var gn = new kot_GraphNode(ele);
		var this1 = this.mNodes;
		var _this = this1.keys;
		var key = ele.hashCode();
		_this.h[key] = ele;
		var _this1 = this1.values;
		var key1 = ele.hashCode();
		_this1.h[key1] = gn;
	}
	,exists: function(ele) {
		var _this = this.mNodes.values;
		var key = ele.hashCode();
		return _this.h.hasOwnProperty(key);
	}
	,addEdge: function(x,y,val) {
		var _this = this.mNodes.values;
		var key = x.hashCode();
		var v1 = _this.h[key];
		if(v1 == null) {
			throw new js__$Boot_HaxeError(Std.string(x) + " not in graph!");
		}
		var _this1 = this.mNodes.values;
		var key1 = y.hashCode();
		var v2 = _this1.h[key1];
		if(v2 == null) {
			throw new js__$Boot_HaxeError(Std.string(y) + " not in graph!");
		}
		v1.addEdge(v2,val);
		v2.addEdge(v1,val);
	}
	,getEdges: function(x) {
		var _this = this.mNodes.values;
		var key = x.hashCode();
		var v1 = _this.h[key];
		if(v1 == null) {
			throw new js__$Boot_HaxeError(Std.string(x) + " not in graph!");
		}
		return v1.getEdges();
	}
	,getConnection: function(x,y) {
		var _this = this.mNodes.values;
		var key = x.hashCode();
		var v1 = _this.h[key];
		var _this1 = this.mNodes.values;
		var key1 = y.hashCode();
		var v2 = _this1.h[key1];
		return v1.getEdge(v2);
	}
	,getGraphDotRepresentation: function() {
		var result = new List();
		var this1 = new haxe_ds__$HashMap_HashMapData();
		var seen = this1;
		result.add("graph {");
		var node = this.mNodes.values.iterator();
		while(node.hasNext()) {
			var node1 = node.next();
			var ele = node1.mEleObject;
			var _g_head = node1.getEdges().h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var edge = val;
				var _this = seen.values;
				var key = edge.v.hashCode();
				if(_this.h.hasOwnProperty(key)) {
					continue;
				}
				result.add("  " + ele.getNodeName() + " -- " + edge.v.getNodeName() + " [label=\"" + Std.string(edge.e) + "\"];");
			}
			var _this1 = seen.keys;
			var key1 = ele.hashCode();
			_this1.h[key1] = ele;
			var _this2 = seen.values;
			var key2 = ele.hashCode();
			_this2.h[key2] = true;
		}
		result.add("}");
		return result.join("\n");
	}
	,__class__: kot_Graph
};
var kot_GraphNode = function(ele) {
	this.mEleObject = ele;
	this.mConnectedEdges = new List();
};
kot_GraphNode.__name__ = true;
kot_GraphNode.prototype = {
	getElement: function() {
		return this.mEleObject;
	}
	,addEdge: function(other,e) {
		var _g_head = this.mConnectedEdges.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var edge = val;
			if(edge.node == other) {
				edge.e = e;
				return;
			}
		}
		this.mConnectedEdges.add({ node : other, e : e});
	}
	,isConnectedTo: function(other) {
		var _g_head = this.mConnectedEdges.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var edge = val;
			if(edge.node == other) {
				return true;
			}
		}
		return false;
	}
	,getEdge: function(other) {
		var _g_head = this.mConnectedEdges.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var edge = val;
			if(edge.node == other) {
				return edge.e;
			}
		}
		return null;
	}
	,getEdges: function() {
		var result = new List();
		var _g_head = this.mConnectedEdges.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var edge = val;
			result.add({ v : edge.node.mEleObject, e : edge.e});
		}
		return result;
	}
	,countConnections: function() {
		return this.mConnectedEdges.length;
	}
	,__class__: kot_GraphNode
};
var kot_Kretha = function() { };
kot_Kretha.__name__ = true;
kot_Kretha.onMessage = function(e) {
	var result = new haxe_ds_StringMap();
	try {
		var fileContent = js_Boot.__cast(e.data.txt , String);
		var decisionRatio = js_Boot.__cast(e.data.decisionRatio , Float);
		var globalDeletion = js_Boot.__cast(e.data.globalDeletion , Bool);
		var transivity = js_Boot.__cast(e.data.transivity , Bool);
		var g = null;
		if(fileContent.charAt(0) == ">" || fileContent.charAt(0) == ";") {
			var reader = new kot_FastaAlignmentReader();
			var seqs = reader.readSequences(fileContent,globalDeletion);
			g = kot_NeighborJoining.run(seqs);
		} else {
			var reader1 = new kot_DistanceMatrixReader();
			var d = reader1.readMatrix(fileContent);
			g = kot_NeighborJoining.runOnMatrix(d);
			kot_FourTimesRule.distanceMatrix = d;
		}
		var c = kot_MidPointRooter.root(g);
		var s = kot_FourTimesRule.doRule(c,decisionRatio,transivity);
		var resL = kot_Kretha.formatSpeciesList(s);
		kot_CladeColorer.colorClades(c,s);
		var svg = c.getSVG();
		if(__map_reserved["svg"] != null) {
			result.setReserved("svg",svg);
		} else {
			result.h["svg"] = svg;
		}
		if(__map_reserved["putativeSpecies"] != null) {
			result.setReserved("putativeSpecies",resL);
		} else {
			result.h["putativeSpecies"] = resL;
		}
	} catch( e1 ) {
		if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
		console.log(e1);
		var value = "The following error occurred: " + Std.string(e1);
		if(__map_reserved["svg"] != null) {
			result.setReserved("svg",value);
		} else {
			result.h["svg"] = value;
		}
		if(__map_reserved["putativeSpecies"] != null) {
			result.setReserved("putativeSpecies","");
		} else {
			result.h["putativeSpecies"] = "";
		}
	}
	kot_Kretha.workerScope.postMessage(result);
};
kot_Kretha.formatSpeciesList = function(s) {
	var result = new List();
	var i = 1;
	var _g_head = s.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var subList = val;
		var _g_head1 = subList.h;
		while(_g_head1 != null) {
			var val1 = _g_head1.item;
			_g_head1 = _g_head1.next;
			var e = val1;
			var _g_head2 = e.mNames.h;
			while(_g_head2 != null) {
				var val2 = _g_head2.item;
				_g_head2 = _g_head2.next;
				var name = val2;
				result.add(name + "\t" + i);
			}
		}
		++i;
	}
	return result.join("\n");
};
kot_Kretha.main = function() {
	kot_Kretha.workerScope = self;
	kot_Kretha.workerScope.onmessage = kot_Kretha.onMessage;
};
var kot_MidPointRooter = function() { };
kot_MidPointRooter.__name__ = true;
kot_MidPointRooter.getLongestPath = function(g,current,commingFrom) {
	var bestLength = 0;
	var path = null;
	var _g_head;
	var _this = g.mNodes.values;
	var key = current.hashCode();
	var v1 = _this.h[key];
	if(v1 == null) {
		throw new js__$Boot_HaxeError(Std.string(current) + " not in graph!");
	}
	_g_head = v1.getEdges().h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var connection = val;
		if(connection.v == commingFrom) {
			continue;
		}
		var alternative = kot_MidPointRooter.getLongestPath(g,connection.v,current);
		var l = alternative.l + connection.e;
		if(l > bestLength) {
			bestLength = l;
			path = alternative.path;
		}
	}
	if(path == null) {
		path = new List();
	}
	path.add(current);
	return { path : path, l : bestLength};
};
kot_MidPointRooter.findLongestDistance = function(g) {
	var result = null;
	var _g_head = g.getLeafs().h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var seq = val;
		var alternativeResult = kot_MidPointRooter.getLongestPath(g,seq,null);
		if(result == null || result.l < alternativeResult.l) {
			result = alternativeResult;
		}
	}
	return result;
};
kot_MidPointRooter.findMidPoint = function(g) {
	var result = kot_MidPointRooter.findLongestDistance(g);
	console.log("Longest path: " + Std.string(result.path) + " with length " + result.l);
	var midLen = result.l / 2;
	var sum = 0;
	var conLen = 0;
	var oldS = null;
	var newS = null;
	var _g_head = result.path.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var s = val;
		oldS = newS;
		newS = s;
		if(oldS == null) {
			continue;
		}
		var _this = g.mNodes.values;
		var key = newS.hashCode();
		var v1 = _this.h[key];
		var _this1 = g.mNodes.values;
		var key1 = oldS.hashCode();
		var v2 = _this1.h[key1];
		conLen = v1.getEdge(v2);
		sum += conLen;
		if(sum > midLen) {
			break;
		}
	}
	return { n1 : oldS, n2 : newS, a : conLen - (sum - midLen), b : sum - midLen};
};
kot_MidPointRooter.root = function(g) {
	var midPoint = kot_MidPointRooter.findMidPoint(g);
	console.log("midPoint: " + Std.string(midPoint));
	var rootClade = new kot_Clade();
	rootClade.mInfo.add("Root");
	kot_MidPointRooter.genSubClade(g,midPoint.n1,midPoint.n2,rootClade,midPoint.a,0);
	kot_MidPointRooter.genSubClade(g,midPoint.n2,midPoint.n1,rootClade,midPoint.b,0);
	return rootClade;
};
kot_MidPointRooter.genSubClade = function(g,process,commingFrom,parentClade,dist,lvl) {
	var _this = g.mNodes.values;
	var key = process.hashCode();
	var v1 = _this.h[key];
	if(v1 == null) {
		throw new js__$Boot_HaxeError(Std.string(process) + " not in graph!");
	}
	var connections = v1.getEdges();
	var clade = new kot_Clade();
	var seq = process.mSeq;
	if(seq != null) {
		var _this1 = clade.mConnectedInfo;
		if(__map_reserved["sequence"] != null) {
			_this1.setReserved("sequence",process);
		} else {
			_this1.h["sequence"] = process;
		}
	}
	var result = null;
	if(process.mNames == null || process.mNames.length == 0) {
		result = "noName";
	} else if(process.mNames.length == 1) {
		result = process.mNames.first();
	} else {
		result = process.mNames.join(",");
	}
	clade.mInfo.add(result);
	clade.mParent = parentClade;
	if(dist != null) {
		clade.mDist = dist;
	}
	parentClade.mChilds.add(clade);
	var _g_head;
	var _this2 = g.mNodes.values;
	var key1 = process.hashCode();
	var v11 = _this2.h[key1];
	if(v11 == null) {
		throw new js__$Boot_HaxeError(Std.string(process) + " not in graph!");
	}
	_g_head = v11.getEdges().h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var connection = val;
		if(connection.v == commingFrom) {
			continue;
		}
		kot_MidPointRooter.genSubClade(g,connection.v,process,clade,connection.e,lvl + 1);
	}
};
var kot_NeighborJoining = function() { };
kot_NeighborJoining.__name__ = true;
kot_NeighborJoining.run = function(seqs) {
	var length = seqs.length;
	var this1 = new Array(length);
	var r = this1;
	haxe_ds__$Vector_Vector_$Impl_$.blit(seqs,0,r,0,seqs.length);
	var endPoints = r;
	var nrIndividuals = seqs.length;
	var d = new kot_DistanceMatrix(endPoints);
	var _g = 0;
	while(_g < endPoints.length) {
		var ind1 = endPoints[_g];
		++_g;
		var _g1 = 0;
		while(_g1 < endPoints.length) {
			var ind2 = endPoints[_g1];
			++_g1;
			if(ind1 == ind2) {
				break;
			}
			if((ind2.mSeq == null ? 0 : ind2.mSeq.length) != (ind1.mSeq == null ? 0 : ind1.mSeq.length)) {
				throw new js__$Boot_HaxeError("Cannot compare sequences of different length!");
			}
			var score = 0;
			var count = 0;
			var _g11 = 0;
			var _g2 = ind1.mSeq == null ? 0 : ind1.mSeq.length;
			while(_g11 < _g2) {
				var i = _g11++;
				var c1 = ind1.mSeq.charAt(i);
				var c2 = ind2.mSeq.charAt(i);
				if(!(c1 == "A" || c1 == "T" || c1 == "G" || c1 == "C") || !(c2 == "A" || c2 == "T" || c2 == "G" || c2 == "C")) {
					continue;
				}
				if(c1 != c2) {
					++score;
				}
				++count;
			}
			var diff = count == 0 ? 1.0 : score / count;
			if(ind1 == ind2) {
				if(diff != 0) {
					throw new js__$Boot_HaxeError("Distance of identical objects must be 0!");
				}
			}
			var _this = d.mNamePosLookup.values;
			var key = ind1.hashCode();
			var pos1 = _this.h[key];
			if(pos1 == null) {
				throw new js__$Boot_HaxeError(Std.string(ind1) + " not in map!");
			}
			var _this1 = d.mNamePosLookup.values;
			var key1 = ind2.hashCode();
			var pos2 = _this1.h[key1];
			if(pos2 == null) {
				throw new js__$Boot_HaxeError(Std.string(ind2) + " not in map!");
			}
			if(pos1 > pos2) {
				var swap = pos1;
				pos1 = pos2;
				pos2 = swap;
			}
			d.mValues[pos1 + pos2 * d.mWidth] = diff;
		}
	}
	return kot_NeighborJoining.runOnMatrix(d);
};
kot_NeighborJoining.runOnMatrix = function(d) {
	var endPoints = d.mNames;
	var result = new kot_Graph(endPoints);
	var innerNumber = 0;
	while(endPoints.length > 2) {
		var this1 = new haxe_ds__$HashMap_HashMapData();
		var r = this1;
		var _g = 0;
		while(_g < endPoints.length) {
			var seq = endPoints[_g];
			++_g;
			var sum = 0;
			var _g1 = 0;
			while(_g1 < endPoints.length) {
				var otherSeq = endPoints[_g1];
				++_g1;
				var ret = 0;
				if(seq != otherSeq) {
					var _this = d.mNamePosLookup.values;
					var key = seq.hashCode();
					var pos1 = _this.h[key];
					if(pos1 == null) {
						throw new js__$Boot_HaxeError(Std.string(seq) + " not in map!");
					}
					var _this1 = d.mNamePosLookup.values;
					var key1 = otherSeq.hashCode();
					var pos2 = _this1.h[key1];
					if(pos2 == null) {
						throw new js__$Boot_HaxeError(Std.string(otherSeq) + " not in map!");
					}
					if(pos1 > pos2) {
						var swap = pos1;
						pos1 = pos2;
						pos2 = swap;
					}
					ret = d.mValues[pos1 + pos2 * d.mWidth];
				}
				sum += ret;
			}
			var v = sum / (endPoints.length - 2);
			var _this2 = r.keys;
			var key2 = seq.hashCode();
			_this2.h[key2] = seq;
			var _this3 = r.values;
			var key3 = seq.hashCode();
			_this3.h[key3] = v;
		}
		var m = new kot_DistanceMatrix(endPoints);
		var _g2 = 0;
		while(_g2 < endPoints.length) {
			var seq1 = endPoints[_g2];
			++_g2;
			var _this4 = r.values;
			var key4 = seq1.hashCode();
			var r_i = _this4.h[key4];
			var _g11 = 0;
			while(_g11 < endPoints.length) {
				var seq2 = endPoints[_g11];
				++_g11;
				if(seq1 == seq2) {
					break;
				}
				var _this5 = r.values;
				var key5 = seq2.hashCode();
				var r_j = _this5.h[key5];
				var ret1 = 0;
				if(seq1 != seq2) {
					var _this6 = d.mNamePosLookup.values;
					var key6 = seq1.hashCode();
					var pos11 = _this6.h[key6];
					if(pos11 == null) {
						throw new js__$Boot_HaxeError(Std.string(seq1) + " not in map!");
					}
					var _this7 = d.mNamePosLookup.values;
					var key7 = seq2.hashCode();
					var pos21 = _this7.h[key7];
					if(pos21 == null) {
						throw new js__$Boot_HaxeError(Std.string(seq2) + " not in map!");
					}
					if(pos11 > pos21) {
						var swap1 = pos11;
						pos11 = pos21;
						pos21 = swap1;
					}
					ret1 = d.mValues[pos11 + pos21 * d.mWidth];
				}
				var val = ret1 - (r_i + r_j);
				if(seq1 == seq2) {
					if(val != 0) {
						throw new js__$Boot_HaxeError("Distance of identical objects must be 0!");
					}
				}
				var _this8 = m.mNamePosLookup.values;
				var key8 = seq1.hashCode();
				var pos12 = _this8.h[key8];
				if(pos12 == null) {
					throw new js__$Boot_HaxeError(Std.string(seq1) + " not in map!");
				}
				var _this9 = m.mNamePosLookup.values;
				var key9 = seq2.hashCode();
				var pos22 = _this9.h[key9];
				if(pos22 == null) {
					throw new js__$Boot_HaxeError(Std.string(seq2) + " not in map!");
				}
				if(pos12 > pos22) {
					var swap2 = pos12;
					pos12 = pos22;
					pos22 = swap2;
				}
				m.mValues[pos12 + pos22 * m.mWidth] = val;
			}
		}
		var lowestSeq1 = endPoints[0];
		var lowestSeq2 = endPoints[1];
		var ret2 = 0;
		if(lowestSeq1 != lowestSeq2) {
			var _this10 = m.mNamePosLookup.values;
			var key10 = lowestSeq1.hashCode();
			var pos13 = _this10.h[key10];
			if(pos13 == null) {
				throw new js__$Boot_HaxeError(Std.string(lowestSeq1) + " not in map!");
			}
			var _this11 = m.mNamePosLookup.values;
			var key11 = lowestSeq2.hashCode();
			var pos23 = _this11.h[key11];
			if(pos23 == null) {
				throw new js__$Boot_HaxeError(Std.string(lowestSeq2) + " not in map!");
			}
			if(pos13 > pos23) {
				var swap3 = pos13;
				pos13 = pos23;
				pos23 = swap3;
			}
			ret2 = m.mValues[pos13 + pos23 * m.mWidth];
		}
		var lowestVal = ret2;
		var _g3 = 0;
		while(_g3 < endPoints.length) {
			var seq11 = endPoints[_g3];
			++_g3;
			var _g12 = 0;
			while(_g12 < endPoints.length) {
				var seq21 = endPoints[_g12];
				++_g12;
				if(seq11 == seq21) {
					break;
				}
				var ret3 = 0;
				if(seq11 != seq21) {
					var _this12 = m.mNamePosLookup.values;
					var key12 = seq11.hashCode();
					var pos14 = _this12.h[key12];
					if(pos14 == null) {
						throw new js__$Boot_HaxeError(Std.string(seq11) + " not in map!");
					}
					var _this13 = m.mNamePosLookup.values;
					var key13 = seq21.hashCode();
					var pos24 = _this13.h[key13];
					if(pos24 == null) {
						throw new js__$Boot_HaxeError(Std.string(seq21) + " not in map!");
					}
					if(pos14 > pos24) {
						var swap4 = pos14;
						pos14 = pos24;
						pos24 = swap4;
					}
					ret3 = m.mValues[pos14 + pos24 * m.mWidth];
				}
				var currentVal = ret3;
				if(currentVal < lowestVal) {
					lowestSeq1 = seq11;
					lowestSeq2 = seq21;
					var ret4 = 0;
					if(lowestSeq1 != lowestSeq2) {
						var _this14 = m.mNamePosLookup.values;
						var key14 = lowestSeq1.hashCode();
						var pos15 = _this14.h[key14];
						if(pos15 == null) {
							throw new js__$Boot_HaxeError(Std.string(lowestSeq1) + " not in map!");
						}
						var _this15 = m.mNamePosLookup.values;
						var key15 = lowestSeq2.hashCode();
						var pos25 = _this15.h[key15];
						if(pos25 == null) {
							throw new js__$Boot_HaxeError(Std.string(lowestSeq2) + " not in map!");
						}
						if(pos15 > pos25) {
							var swap5 = pos15;
							pos15 = pos25;
							pos25 = swap5;
						}
						ret4 = m.mValues[pos15 + pos25 * m.mWidth];
					}
					lowestVal = ret4;
				}
			}
		}
		var l = new List();
		l.add("Inner" + innerNumber++);
		var inner = new kot_Sequence(l,null);
		var ret5 = 0;
		if(lowestSeq1 != lowestSeq2) {
			var _this16 = d.mNamePosLookup.values;
			var key16 = lowestSeq1.hashCode();
			var pos16 = _this16.h[key16];
			if(pos16 == null) {
				throw new js__$Boot_HaxeError(Std.string(lowestSeq1) + " not in map!");
			}
			var _this17 = d.mNamePosLookup.values;
			var key17 = lowestSeq2.hashCode();
			var pos26 = _this17.h[key17];
			if(pos26 == null) {
				throw new js__$Boot_HaxeError(Std.string(lowestSeq2) + " not in map!");
			}
			if(pos16 > pos26) {
				var swap6 = pos16;
				pos16 = pos26;
				pos26 = swap6;
			}
			ret5 = d.mValues[pos16 + pos26 * d.mWidth];
		}
		var dist = ret5;
		var _this18 = r.values;
		var key18 = lowestSeq1.hashCode();
		var v_iu = dist + _this18.h[key18];
		var _this19 = r.values;
		var key19 = lowestSeq2.hashCode();
		var v_iu1 = (v_iu - _this19.h[key19]) / 2;
		var v_ju = dist - v_iu1;
		if(v_iu1 < 0 && v_ju < 0) {
			var x_tmp = v_iu1;
			v_iu1 = -v_ju;
			v_ju = -x_tmp;
		} else {
			if(v_iu1 < 0) {
				v_ju -= v_iu1;
				v_iu1 = 0;
			}
			if(v_ju < 0) {
				v_iu1 -= v_ju;
				v_ju = 0;
			}
		}
		var gn = new kot_GraphNode(inner);
		var this2 = result.mNodes;
		var _this20 = this2.keys;
		var key20 = inner.hashCode();
		_this20.h[key20] = inner;
		var _this21 = this2.values;
		var key21 = inner.hashCode();
		_this21.h[key21] = gn;
		var _this22 = result.mNodes.values;
		var key22 = lowestSeq1.hashCode();
		var v1 = _this22.h[key22];
		if(v1 == null) {
			throw new js__$Boot_HaxeError(Std.string(lowestSeq1) + " not in graph!");
		}
		var _this23 = result.mNodes.values;
		var key23 = inner.hashCode();
		var v2 = _this23.h[key23];
		if(v2 == null) {
			throw new js__$Boot_HaxeError(Std.string(inner) + " not in graph!");
		}
		v1.addEdge(v2,v_iu1);
		v2.addEdge(v1,v_iu1);
		var _this24 = result.mNodes.values;
		var key24 = lowestSeq2.hashCode();
		var v11 = _this24.h[key24];
		if(v11 == null) {
			throw new js__$Boot_HaxeError(Std.string(lowestSeq2) + " not in graph!");
		}
		var _this25 = result.mNodes.values;
		var key25 = inner.hashCode();
		var v21 = _this25.h[key25];
		if(v21 == null) {
			throw new js__$Boot_HaxeError(Std.string(inner) + " not in graph!");
		}
		v11.addEdge(v21,v_ju);
		v21.addEdge(v11,v_ju);
		var length = endPoints.length - 1;
		var this3 = new Array(length);
		var endPoints_new = this3;
		var idx = 0;
		var _g4 = 0;
		while(_g4 < endPoints.length) {
			var seq3 = endPoints[_g4];
			++_g4;
			if(seq3 == lowestSeq1 || seq3 == lowestSeq2) {
				continue;
			}
			endPoints_new[idx++] = seq3;
		}
		endPoints_new[idx] = inner;
		var d_new = new kot_DistanceMatrix(endPoints_new);
		var _g5 = 0;
		while(_g5 < endPoints_new.length) {
			var seq12 = endPoints_new[_g5];
			++_g5;
			var _g13 = 0;
			while(_g13 < endPoints_new.length) {
				var seq22 = endPoints_new[_g13];
				++_g13;
				if(seq12 == seq22) {
					break;
				}
				if(seq12 == inner || seq22 == inner) {
					var k = seq12 == inner ? seq22 : seq12;
					var ret6 = 0;
					if(lowestSeq1 != k) {
						var _this26 = d.mNamePosLookup.values;
						var key26 = lowestSeq1.hashCode();
						var pos17 = _this26.h[key26];
						if(pos17 == null) {
							throw new js__$Boot_HaxeError(Std.string(lowestSeq1) + " not in map!");
						}
						var _this27 = d.mNamePosLookup.values;
						var key27 = k.hashCode();
						var pos27 = _this27.h[key27];
						if(pos27 == null) {
							throw new js__$Boot_HaxeError(Std.string(k) + " not in map!");
						}
						if(pos17 > pos27) {
							var swap7 = pos17;
							pos17 = pos27;
							pos27 = swap7;
						}
						ret6 = d.mValues[pos17 + pos27 * d.mWidth];
					}
					var ret7 = 0;
					if(lowestSeq2 != k) {
						var _this28 = d.mNamePosLookup.values;
						var key28 = lowestSeq2.hashCode();
						var pos18 = _this28.h[key28];
						if(pos18 == null) {
							throw new js__$Boot_HaxeError(Std.string(lowestSeq2) + " not in map!");
						}
						var _this29 = d.mNamePosLookup.values;
						var key29 = k.hashCode();
						var pos28 = _this29.h[key29];
						if(pos28 == null) {
							throw new js__$Boot_HaxeError(Std.string(k) + " not in map!");
						}
						if(pos18 > pos28) {
							var swap8 = pos18;
							pos18 = pos28;
							pos28 = swap8;
						}
						ret7 = d.mValues[pos18 + pos28 * d.mWidth];
					}
					var ret8 = 0;
					if(lowestSeq1 != lowestSeq2) {
						var _this30 = d.mNamePosLookup.values;
						var key30 = lowestSeq1.hashCode();
						var pos19 = _this30.h[key30];
						if(pos19 == null) {
							throw new js__$Boot_HaxeError(Std.string(lowestSeq1) + " not in map!");
						}
						var _this31 = d.mNamePosLookup.values;
						var key31 = lowestSeq2.hashCode();
						var pos29 = _this31.h[key31];
						if(pos29 == null) {
							throw new js__$Boot_HaxeError(Std.string(lowestSeq2) + " not in map!");
						}
						if(pos19 > pos29) {
							var swap9 = pos19;
							pos19 = pos29;
							pos29 = swap9;
						}
						ret8 = d.mValues[pos19 + pos29 * d.mWidth];
					}
					var dist1 = (ret6 + ret7 - ret8) / 2;
					if(seq12 == seq22) {
						if(dist1 != 0) {
							throw new js__$Boot_HaxeError("Distance of identical objects must be 0!");
						}
					}
					var _this32 = d_new.mNamePosLookup.values;
					var key32 = seq12.hashCode();
					var pos110 = _this32.h[key32];
					if(pos110 == null) {
						throw new js__$Boot_HaxeError(Std.string(seq12) + " not in map!");
					}
					var _this33 = d_new.mNamePosLookup.values;
					var key33 = seq22.hashCode();
					var pos210 = _this33.h[key33];
					if(pos210 == null) {
						throw new js__$Boot_HaxeError(Std.string(seq22) + " not in map!");
					}
					if(pos110 > pos210) {
						var swap10 = pos110;
						pos110 = pos210;
						pos210 = swap10;
					}
					d_new.mValues[pos110 + pos210 * d_new.mWidth] = dist1;
				} else {
					var ret9 = 0;
					if(seq12 != seq22) {
						var _this34 = d.mNamePosLookup.values;
						var key34 = seq12.hashCode();
						var pos111 = _this34.h[key34];
						if(pos111 == null) {
							throw new js__$Boot_HaxeError(Std.string(seq12) + " not in map!");
						}
						var _this35 = d.mNamePosLookup.values;
						var key35 = seq22.hashCode();
						var pos211 = _this35.h[key35];
						if(pos211 == null) {
							throw new js__$Boot_HaxeError(Std.string(seq22) + " not in map!");
						}
						if(pos111 > pos211) {
							var swap11 = pos111;
							pos111 = pos211;
							pos211 = swap11;
						}
						ret9 = d.mValues[pos111 + pos211 * d.mWidth];
					}
					var dist2 = ret9;
					if(seq12 == seq22) {
						if(dist2 != 0) {
							throw new js__$Boot_HaxeError("Distance of identical objects must be 0!");
						}
					}
					var _this36 = d_new.mNamePosLookup.values;
					var key36 = seq12.hashCode();
					var pos112 = _this36.h[key36];
					if(pos112 == null) {
						throw new js__$Boot_HaxeError(Std.string(seq12) + " not in map!");
					}
					var _this37 = d_new.mNamePosLookup.values;
					var key37 = seq22.hashCode();
					var pos212 = _this37.h[key37];
					if(pos212 == null) {
						throw new js__$Boot_HaxeError(Std.string(seq22) + " not in map!");
					}
					if(pos112 > pos212) {
						var swap12 = pos112;
						pos112 = pos212;
						pos212 = swap12;
					}
					d_new.mValues[pos112 + pos212 * d_new.mWidth] = dist2;
				}
			}
		}
		endPoints = endPoints_new;
		d = d_new;
	}
	var x1 = endPoints[0];
	var x2 = endPoints[1];
	var ret10 = 0;
	if(x1 != x2) {
		var _this38 = d.mNamePosLookup.values;
		var key38 = x1.hashCode();
		var pos113 = _this38.h[key38];
		if(pos113 == null) {
			throw new js__$Boot_HaxeError(Std.string(x1) + " not in map!");
		}
		var _this39 = d.mNamePosLookup.values;
		var key39 = x2.hashCode();
		var pos213 = _this39.h[key39];
		if(pos213 == null) {
			throw new js__$Boot_HaxeError(Std.string(x2) + " not in map!");
		}
		if(pos113 > pos213) {
			var swap13 = pos113;
			pos113 = pos213;
			pos213 = swap13;
		}
		ret10 = d.mValues[pos113 + pos213 * d.mWidth];
	}
	var dist3 = ret10;
	var x = endPoints[0];
	var y = endPoints[1];
	var _this40 = result.mNodes.values;
	var key40 = x.hashCode();
	var v12 = _this40.h[key40];
	if(v12 == null) {
		throw new js__$Boot_HaxeError(Std.string(x) + " not in graph!");
	}
	var _this41 = result.mNodes.values;
	var key41 = y.hashCode();
	var v22 = _this41.h[key41];
	if(v22 == null) {
		throw new js__$Boot_HaxeError(Std.string(y) + " not in graph!");
	}
	v12.addEdge(v22,dist3);
	v22.addEdge(v12,dist3);
	return result;
};
var kot_Sequence = function(names,seq) {
	this.mNames = names;
	this.mSeq = seq == null ? seq : seq.toUpperCase();
	this.mHashCode = kot_Sequence.nextHashCode;
	kot_Sequence.nextHashCode++;
};
kot_Sequence.__name__ = true;
kot_Sequence.prototype = {
	getNames: function() {
		return this.mNames;
	}
	,getSequenceString: function() {
		return this.mSeq;
	}
	,getLength: function() {
		if(this.mSeq == null) {
			return 0;
		} else {
			return this.mSeq.length;
		}
	}
	,isAmbChar: function(c) {
		return !(c == "A" || c == "T" || c == "G" || c == "C");
	}
	,getDifferenceScore: function(o,flag) {
		if((o.mSeq == null ? 0 : o.mSeq.length) != (this.mSeq == null ? 0 : this.mSeq.length)) {
			throw new js__$Boot_HaxeError("Cannot compare sequences of different length!");
		}
		var score = 0;
		var count = 0;
		var _g1 = 0;
		var _g = this.mSeq == null ? 0 : this.mSeq.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c1 = this.mSeq.charAt(i);
			var c2 = o.mSeq.charAt(i);
			if(!(c1 == "A" || c1 == "T" || c1 == "G" || c1 == "C") || !(c2 == "A" || c2 == "T" || c2 == "G" || c2 == "C")) {
				continue;
			}
			if(c1 != c2) {
				++score;
			}
			++count;
		}
		if(count == 0) {
			if(flag) {
				return score;
			}
			return 1.0;
		}
		if(flag) {
			return score;
		} else {
			return score / count;
		}
	}
	,getNodeName: function() {
		var result = null;
		if(this.mNames == null || this.mNames.length == 0) {
			result = "noName";
		} else if(this.mNames.length == 1) {
			result = this.mNames.first();
		} else {
			result = this.mNames.join(",");
		}
		return result;
	}
	,toString: function() {
		var result = null;
		if(this.mNames == null || this.mNames.length == 0) {
			result = "noName";
		} else if(this.mNames.length == 1) {
			result = this.mNames.first();
		} else {
			result = this.mNames.join(",");
		}
		return result;
	}
	,hashCode: function() {
		return this.mHashCode;
	}
	,getBadPositions: function(result) {
		var _g1 = 0;
		var _g = this.mSeq.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c = this.mSeq.charAt(i);
			if(c != "A" && c != "T" && c != "G" && c != "C" && c != "-") {
				result.h[i] = true;
			}
		}
	}
	,removePositions: function(im) {
		var newS = new List();
		var _g1 = 0;
		var _g = this.mSeq.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c = this.mSeq.charAt(i);
			if(im.h[i]) {
				continue;
			}
			newS.add(c);
		}
		return newS.join("");
	}
	,__class__: kot_Sequence
};
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {};
js_Boot.__toStr = ({ }).toString;
kot_CladeColorer.colors = ["#FF0000","#00FF00","#0000FF","#CC0000","#00CC00","#0000CC","#CC6600","#99CC00","#006699","#CC9900","#00CC99","#CC00CC","#CC6699","#009933","#0033CC","#6600FF","#3333FF"];
kot_Sequence.nextHashCode = 0;
kot_Kretha.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
